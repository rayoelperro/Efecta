{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3","program":"/home/alberto/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","clap","/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"ansi_term\"","--cfg","feature=\"atty\"","--cfg","feature=\"clap_derive\"","--cfg","feature=\"color\"","--cfg","feature=\"default\"","--cfg","feature=\"derive\"","--cfg","feature=\"strsim\"","--cfg","feature=\"suggestions\"","--cfg","feature=\"vec_map\"","-C","metadata=c0bc1ef5e6f8e08d","-C","extra-filename=-c0bc1ef5e6f8e08d","--out-dir","/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps","-L","dependency=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps","--extern","ansi_term=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libansi_term-ee804cd3742b1de4.rmeta","--extern","atty=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libatty-3350545eb2978d31.rmeta","--extern","bitflags=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libbitflags-9bc51801781cb380.rmeta","--extern","clap_derive=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libclap_derive-23c5e636577af249.so","--extern","indexmap=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libindexmap-ddf05782fc86447e.rmeta","--extern","strsim=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libstrsim-c5bdd675ee378d66.rmeta","--extern","textwrap=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libtextwrap-38d852dd41bfbfa8.rmeta","--extern","unicode_width=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libunicode_width-12e21861d16e2eae.rmeta","--extern","vec_map=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libvec_map-236fcf509ab75899.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/alberto/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libclap-c0bc1ef5e6f8e08d.rmeta"},"prelude":{"crate_id":{"name":"clap","disambiguator":[1145285559575462382,13905145535151890226]},"crate_root":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src","external_crates":[{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","num":15,"id":{"name":"clap_derive","disambiguator":[17294992662450847915,5814623885284164841]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","num":16,"id":{"name":"bitflags","disambiguator":[11919877741981294550,15334297532781674631]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","num":17,"id":{"name":"textwrap","disambiguator":[10395703710831115351,3412212188710024239]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","num":18,"id":{"name":"unicode_width","disambiguator":[9822493788935902736,4248432661043926111]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","num":19,"id":{"name":"ansi_term","disambiguator":[12434217700992453373,15611807640324784678]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","num":20,"id":{"name":"atty","disambiguator":[7841875723605578229,13470780003771371184]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","num":21,"id":{"name":"libc","disambiguator":[6054195020142486603,12302103962190334305]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/features/suggestions.rs","num":22,"id":{"name":"strsim","disambiguator":[1643540422047392151,4935894657228245898]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","num":23,"id":{"name":"indexmap","disambiguator":[16963618753896010968,16002587315657329219]}},{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/map.rs","num":24,"id":{"name":"vec_map","disambiguator":[1164901270776744954,16954796265585983557]}}],"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":354,"byte_end":22517,"line_start":6,"line_end":578,"column_start":1,"column_end":21}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1819},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21147,"byte_end":21150,"line_start":529,"line_end":529,"column_start":24,"column_end":27},"alias_span":null,"name":"App","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1713},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21152,"byte_end":21163,"line_start":529,"line_end":529,"column_start":29,"column_end":40},"alias_span":null,"name":"AppSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2125},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21165,"byte_end":21168,"line_start":529,"line_end":529,"column_start":42,"column_end":45},"alias_span":null,"name":"Arg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21170,"byte_end":21178,"line_start":529,"line_end":529,"column_start":47,"column_end":55},"alias_span":null,"name":"ArgGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2077},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21180,"byte_end":21191,"line_start":529,"line_end":529,"column_start":57,"column_end":68},"alias_span":null,"name":"ArgSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1799},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21193,"byte_end":21204,"line_start":529,"line_end":529,"column_start":70,"column_end":81},"alias_span":null,"name":"Propagation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2311},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21235,"byte_end":21241,"line_start":530,"line_end":530,"column_start":29,"column_end":35},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2376},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21274,"byte_end":21279,"line_start":531,"line_end":531,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21281,"byte_end":21290,"line_start":531,"line_end":531,"column_start":39,"column_end":48},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":846},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21292,"byte_end":21298,"line_start":531,"line_end":531,"column_start":50,"column_end":56},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2394},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21324,"byte_end":21334,"line_start":532,"line_end":532,"column_start":24,"column_end":34},"alias_span":null,"name":"ArgMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2407},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21336,"byte_end":21344,"line_start":532,"line_end":532,"column_start":36,"column_end":44},"alias_span":null,"name":"OsValues","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2401},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21346,"byte_end":21352,"line_start":532,"line_end":532,"column_start":46,"column_end":52},"alias_span":null,"name":"Values","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21505,"byte_end":21506,"line_start":538,"line_end":538,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":354,"byte_end":22517,"line_start":6,"line_end":578,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":67},{"krate":0,"index":521},{"krate":0,"index":562},{"krate":0,"index":827},{"krate":0,"index":1330},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419}],"decl_id":null,"docs":" `clap` is a simple-to-use, efficient, and full-featured library for parsing command line\n arguments and subcommands when writing console/terminal applications.","sig":null,"attributes":[{"value":"crate_type = \"lib\"","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":20452,"byte_end":20474,"line_start":510,"line_end":510,"column_start":1,"column_end":23}},{"value":"deny(missing_docs,\n       missing_debug_implementations,\n       missing_copy_implementations,\n       trivial_casts,\n       unused_import_braces,\n       unused_allocation,\n       trivial_numeric_casts)","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":20536,"byte_end":20728,"line_start":512,"line_end":520,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1699},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138028,"byte_end":138036,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"AppFlags","qualname":"::build::app::settings::AppFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138017,"byte_end":138044,"line_start":54,"line_end":54,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138300,"byte_end":138303,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<AppFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138349,"byte_end":138355,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"zeroed","qualname":"<AppFlags>::zeroed","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1714},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":142506,"byte_end":142522,"line_start":160,"line_end":160,"column_start":5,"column_end":21},"name":"AllowInvalidUtf8","qualname":"::build::app::settings::AppSettings::AllowInvalidUtf8","value":"AppSettings::AllowInvalidUtf8","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should *not* be treated as an error.\n This is the default behavior of `clap`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1716},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":143571,"byte_end":143589,"line_start":185,"line_end":185,"column_start":5,"column_end":23},"name":"AllowLeadingHyphen","qualname":"::build::app::settings::AppSettings::AllowLeadingHyphen","value":"AppSettings::AllowLeadingHyphen","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\n like `-10`. (which would otherwise be parsed as another flag or option)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1718},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":143853,"byte_end":143872,"line_start":190,"line_end":190,"column_start":5,"column_end":24},"name":"AllArgsOverrideSelf","qualname":"::build::app::settings::AppSettings::AllArgsOverrideSelf","value":"AppSettings::AllArgsOverrideSelf","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that all arguments override themselves. This is the equivolent to saying the `foo`\n arg using [`Arg::overrides_with(\"foo\")`] for all defined arguments.\n [`Arg::overrides_with(\"foo\")`]: ./struct.Arg.html#method.overrides_with\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1720},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":144634,"byte_end":144654,"line_start":212,"line_end":212,"column_start":5,"column_end":25},"name":"AllowNegativeNumbers","qualname":"::build::app::settings::AppSettings::AllowNegativeNumbers","value":"AppSettings::AllowNegativeNumbers","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Allows negative numbers to pass as values. This is similar to\n `AllowLeadingHyphen` except that it only allows numbers, all\n other undefined leading hyphens will fail to parse.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1722},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":149050,"byte_end":149072,"line_start":319,"line_end":319,"column_start":5,"column_end":27},"name":"AllowMissingPositional","qualname":"::build::app::settings::AppSettings::AllowMissingPositional","value":"AppSettings::AllowMissingPositional","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Allows one to implement two styles of CLIs where positionals can be used out of order.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1724},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":150627,"byte_end":150651,"line_start":355,"line_end":355,"column_start":5,"column_end":29},"name":"AllowExternalSubcommands","qualname":"::build::app::settings::AppSettings::AllowExternalSubcommands","value":"AppSettings::AllowExternalSubcommands","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that an unexpected positional argument,\n which would otherwise cause a [`ErrorKind::UnknownArgument`] error,\n should instead be treated as a [``] within the [`ArgMatches`] struct.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":151476,"byte_end":151497,"line_start":377,"line_end":377,"column_start":5,"column_end":26},"name":"ArgsNegateSubcommands","qualname":"::build::app::settings::AppSettings::ArgsNegateSubcommands","value":"AppSettings::ArgsNegateSubcommands","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that use of a valid [argument] negates [subcomands] being used after. By default\n `clap` allows arguments between subcommands such as\n `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that\n functionality and says that arguments can only follow the *final* subcommand. For instance\n using this setting makes only the following invocations possible:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":152178,"byte_end":152197,"line_start":397,"line_end":397,"column_start":5,"column_end":24},"name":"ArgRequiredElseHelp","qualname":"::build::app::settings::AppSettings::ArgRequiredElseHelp","value":"AppSettings::ArgRequiredElseHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (and then exit gracefully),\n if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":152659,"byte_end":152670,"line_start":415,"line_end":415,"column_start":5,"column_end":16},"name":"ColoredHelp","qualname":"::build::app::settings::AppSettings::ColoredHelp","value":"AppSettings::ColoredHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Uses colorized help messages.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":153243,"byte_end":153252,"line_start":435,"line_end":435,"column_start":5,"column_end":14},"name":"ColorAuto","qualname":"::build::app::settings::AppSettings::ColorAuto","value":"AppSettings::ColorAuto","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Enables colored output only when the output is going to a terminal or TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":153777,"byte_end":153788,"line_start":453,"line_end":453,"column_start":5,"column_end":16},"name":"ColorAlways","qualname":"::build::app::settings::AppSettings::ColorAlways","value":"AppSettings::ColorAlways","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Enables colored output regardless of whether or not the output is going to a terminal/TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":154303,"byte_end":154313,"line_start":471,"line_end":471,"column_start":5,"column_end":15},"name":"ColorNever","qualname":"::build::app::settings::AppSettings::ColorNever","value":"AppSettings::ColorNever","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables colored output no matter if the output is going to a terminal/TTY, or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1738},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":154643,"byte_end":154666,"line_start":483,"line_end":483,"column_start":5,"column_end":28},"name":"DontCollapseArgsInUsage","qualname":"::build::app::settings::AppSettings::DontCollapseArgsInUsage","value":"AppSettings::DontCollapseArgsInUsage","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":155413,"byte_end":155438,"line_start":502,"line_end":502,"column_start":5,"column_end":30},"name":"DontDelimitTrailingValues","qualname":"::build::app::settings::AppSettings::DontDelimitTrailingValues","value":"AppSettings::DontDelimitTrailingValues","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\n was used.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1742},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":156111,"byte_end":156132,"line_start":523,"line_end":523,"column_start":5,"column_end":26},"name":"DisableHelpSubcommand","qualname":"::build::app::settings::AppSettings::DisableHelpSubcommand","value":"AppSettings::DisableHelpSubcommand","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables the `help` subcommand","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1744},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":157216,"byte_end":157230,"line_start":556,"line_end":556,"column_start":5,"column_end":19},"name":"DisableVersion","qualname":"::build::app::settings::AppSettings::DisableVersion","value":"AppSettings::DisableVersion","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` [`App`] without affecting any of the [``]s\n (Defaults to `false`; application *does* have a version flag)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1746},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":157640,"byte_end":157658,"line_start":570,"line_end":570,"column_start":5,"column_end":23},"name":"DeriveDisplayOrder","qualname":"::build::app::settings::AppSettings::DeriveDisplayOrder","value":"AppSettings::DeriveDisplayOrder","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Displays the arguments and [``]s in the help message in the order that they were\n declared in, and not alphabetically which is the default.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1748},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":158389,"byte_end":158402,"line_start":591,"line_end":591,"column_start":5,"column_end":18},"name":"GlobalVersion","qualname":"::build::app::settings::AppSettings::GlobalVersion","value":"AppSettings::GlobalVersion","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies to use the version of the current command for all child [``]s.\n (Defaults to `false`; subcommands have independent version strings from their parents.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1750},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":158740,"byte_end":158746,"line_start":605,"line_end":605,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::build::app::settings::AppSettings::Hidden","value":"AppSettings::Hidden","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that this [``] should be hidden from help messages","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1752},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":158925,"byte_end":158949,"line_start":609,"line_end":609,"column_start":5,"column_end":29},"name":"HidePossibleValuesInHelp","qualname":"::build::app::settings::AppSettings::HidePossibleValuesInHelp","value":"AppSettings::HidePossibleValuesInHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Tells `clap` *not* to print possible values when displaying help information.\n This can be useful if there are many values, or they are explained elsewhere.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1754},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":160412,"byte_end":160428,"line_start":639,"line_end":639,"column_start":5,"column_end":21},"name":"InferSubcommands","qualname":"::build::app::settings::AppSettings::InferSubcommands","value":"AppSettings::InferSubcommands","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to\n match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":161141,"byte_end":161153,"line_start":657,"line_end":657,"column_start":5,"column_end":17},"name":"NoBinaryName","qualname":"::build::app::settings::AppSettings::NoBinaryName","value":"AppSettings::NoBinaryName","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that the parser should not assume the first argument passed is the binary name.\n This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one\n one would not normally type the binary or program name for each command.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1758},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":161454,"byte_end":161466,"line_start":669,"line_end":669,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::build::app::settings::AppSettings::NextLineHelp","value":"AppSettings::NextLineHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Places the help string for all arguments on the line after the argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":163247,"byte_end":163268,"line_start":714,"line_end":714,"column_start":5,"column_end":26},"name":"SubcommandsNegateReqs","qualname":"::build::app::settings::AppSettings::SubcommandsNegateReqs","value":"AppSettings::SubcommandsNegateReqs","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Allows [``]s to override all requirements of the parent command.\n For example if you had a subcommand or top level application with a required argument\n that is only required as long as there is no subcommand present,\n using this setting would allow you to set those arguments to [`Arg::required(true)`]\n and yet receive no error so long as the user uses a valid subcommand instead.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1762},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":164314,"byte_end":164340,"line_start":737,"line_end":737,"column_start":5,"column_end":31},"name":"SubcommandRequiredElseHelp","qualname":"::build::app::settings::AppSettings::SubcommandRequiredElseHelp","value":"AppSettings::SubcommandRequiredElseHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (before exiting gracefully) if no\n [``]s are present at runtime (i.e. an empty run such as `$ myprog`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":165491,"byte_end":165501,"line_start":770,"line_end":770,"column_start":5,"column_end":15},"name":"StrictUtf8","qualname":"::build::app::settings::AppSettings::StrictUtf8","value":"AppSettings::StrictUtf8","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should be treated as an error and fail\n with a [`ErrorKind::InvalidUtf8`] error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":166175,"byte_end":166193,"line_start":792,"line_end":792,"column_start":5,"column_end":23},"name":"SubcommandRequired","qualname":"::build::app::settings::AppSettings::SubcommandRequired","value":"AppSettings::SubcommandRequired","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Allows specifying that if no [``] is present at runtime,\n error and exit gracefully.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1768},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":167088,"byte_end":167102,"line_start":815,"line_end":815,"column_start":5,"column_end":19},"name":"TrailingVarArg","qualname":"::build::app::settings::AppSettings::TrailingVarArg","value":"AppSettings::TrailingVarArg","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\n attempt to parse any further args.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":167766,"byte_end":167784,"line_start":834,"line_end":834,"column_start":5,"column_end":23},"name":"UnifiedHelpMessage","qualname":"::build::app::settings::AppSettings::UnifiedHelpMessage","value":"AppSettings::UnifiedHelpMessage","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Groups flags and options together, presenting a more unified help message\n (a la `getopts` or `docopt` style).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":168501,"byte_end":168523,"line_start":856,"line_end":856,"column_start":5,"column_end":27},"name":"VersionlessSubcommands","qualname":"::build::app::settings::AppSettings::VersionlessSubcommands","value":"AppSettings::VersionlessSubcommands","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` for all [``]s\n (Defaults to `false`; subcommands *do* have version flags.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1774},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169299,"byte_end":169310,"line_start":878,"line_end":878,"column_start":5,"column_end":16},"name":"WaitOnError","qualname":"::build::app::settings::AppSettings::WaitOnError","value":"AppSettings::WaitOnError","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Will display a message \"Press \\[ENTER\\]/\\[RETURN\\] to continue...\" and wait for user before\n exiting","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169367,"byte_end":169377,"line_start":881,"line_end":881,"column_start":5,"column_end":15},"name":"NoAutoHelp","qualname":"::build::app::settings::AppSettings::NoAutoHelp","value":"AppSettings::NoAutoHelp","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" @TODO-v3: @docs write them...maybe rename\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1778},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169434,"byte_end":169447,"line_start":884,"line_end":884,"column_start":5,"column_end":18},"name":"NoAutoVersion","qualname":"::build::app::settings::AppSettings::NoAutoVersion","value":"AppSettings::NoAutoVersion","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" @TODO-v3: @docs write them...maybe rename\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169473,"byte_end":169499,"line_start":887,"line_end":887,"column_start":5,"column_end":31},"name":"LowIndexMultiplePositional","qualname":"::build::app::settings::AppSettings::LowIndexMultiplePositional","value":"AppSettings::LowIndexMultiplePositional","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169525,"byte_end":169539,"line_start":890,"line_end":890,"column_start":5,"column_end":19},"name":"TrailingValues","qualname":"::build::app::settings::AppSettings::TrailingValues","value":"AppSettings::TrailingValues","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1784},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169565,"byte_end":169581,"line_start":893,"line_end":893,"column_start":5,"column_end":21},"name":"ValidNegNumFound","qualname":"::build::app::settings::AppSettings::ValidNegNumFound","value":"AppSettings::ValidNegNumFound","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1786},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169607,"byte_end":169612,"line_start":896,"line_end":896,"column_start":5,"column_end":10},"name":"Built","qualname":"::build::app::settings::AppSettings::Built","value":"AppSettings::Built","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169638,"byte_end":169651,"line_start":899,"line_end":899,"column_start":5,"column_end":18},"name":"ValidArgFound","qualname":"::build::app::settings::AppSettings::ValidArgFound","value":"AppSettings::ValidArgFound","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1790},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169677,"byte_end":169689,"line_start":902,"line_end":902,"column_start":5,"column_end":17},"name":"ContainsLast","qualname":"::build::app::settings::AppSettings::ContainsLast","value":"AppSettings::ContainsLast","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1713},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":140743,"byte_end":140754,"line_start":119,"line_end":119,"column_start":10,"column_end":21},"name":"AppSettings","qualname":"::build::app::settings::AppSettings","value":"AppSettings::{AllowInvalidUtf8, AllowLeadingHyphen, AllArgsOverrideSelf, AllowNegativeNumbers, AllowMissingPositional, AllowExternalSubcommands, ArgsNegateSubcommands, ArgRequiredElseHelp, ColoredHelp, ColorAuto, ColorAlways, ColorNever, DontCollapseArgsInUsage, DontDelimitTrailingValues, DisableHelpSubcommand, DisableVersion, DeriveDisplayOrder, GlobalVersion, Hidden, HidePossibleValuesInHelp, InferSubcommands, NoBinaryName, NextLineHelp, SubcommandsNegateReqs, SubcommandRequiredElseHelp, StrictUtf8, SubcommandRequired, TrailingVarArg, UnifiedHelpMessage, VersionlessSubcommands, WaitOnError, NoAutoHelp, NoAutoVersion, LowIndexMultiplePositional, TrailingValues, ValidNegNumFound, Built, ValidArgFound, ContainsLast}","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790}],"decl_id":null,"docs":" Application level settings, which affect how [`App`] operates","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":140734,"byte_end":169692,"line_start":119,"line_end":903,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63400,"byte_end":63402,"line_start":32,"line_end":32,"column_start":5,"column_end":7},"name":"To","qualname":"::build::app::Propagation::To","value":"Propagation::To(Id)","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1803},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63412,"byte_end":63416,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Full","qualname":"::build::app::Propagation::Full","value":"Propagation::Full","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1805},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63422,"byte_end":63431,"line_start":34,"line_end":34,"column_start":5,"column_end":14},"name":"NextLevel","qualname":"::build::app::Propagation::NextLevel","value":"Propagation::NextLevel","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63437,"byte_end":63441,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"None","qualname":"::build::app::Propagation::None","value":"Propagation::None","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1799},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63382,"byte_end":63393,"line_start":31,"line_end":31,"column_start":10,"column_end":21},"name":"Propagation","qualname":"::build::app::Propagation","value":"Propagation::{To, Full, NextLevel, None}","parent":null,"children":[{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63373,"byte_end":63444,"line_start":31,"line_end":36,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":63373,"byte_end":63444,"line_start":31,"line_end":36,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1819},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64657,"byte_end":64660,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"App","qualname":"::build::app::App","value":"App { id, name, bin_name, author, version, long_version, about, long_about, more_help, pre_help, aliases, usage_str, usage, help_str, disp_ord, term_w, max_w, template, settings, g_settings, args, subcommands, groups, help_headings }","parent":null,"children":[{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844}],"decl_id":null,"docs":" Used to create a representation of a command line program and all possible command line\n arguments. Application settings are set using the \"builder pattern\" with the\n [`App::get_matches`] family of methods being the terminal methods that starts the\n runtime-parsing process. These methods then return information about the user supplied\n arguments (or lack there of).","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64694,"byte_end":64696,"line_start":69,"line_end":69,"column_start":9,"column_end":11},"name":"id","qualname":"::build::app::App::id","value":"u64","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64729,"byte_end":64733,"line_start":71,"line_end":71,"column_start":9,"column_end":13},"name":"name","qualname":"::build::app::App::name","value":"std::string::String","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64770,"byte_end":64778,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"bin_name","qualname":"::build::app::App::bin_name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1824},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64823,"byte_end":64829,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"name":"author","qualname":"::build::app::App::author","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1825},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64875,"byte_end":64882,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"version","qualname":"::build::app::App::version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64928,"byte_end":64940,"line_start":79,"line_end":79,"column_start":9,"column_end":21},"name":"long_version","qualname":"::build::app::App::long_version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":64986,"byte_end":64991,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"name":"about","qualname":"::build::app::App::about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65037,"byte_end":65047,"line_start":83,"line_end":83,"column_start":9,"column_end":19},"name":"long_about","qualname":"::build::app::App::long_about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65093,"byte_end":65102,"line_start":85,"line_end":85,"column_start":9,"column_end":18},"name":"more_help","qualname":"::build::app::App::more_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65148,"byte_end":65156,"line_start":87,"line_end":87,"column_start":9,"column_end":17},"name":"pre_help","qualname":"::build::app::App::pre_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1831},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65202,"byte_end":65209,"line_start":89,"line_end":89,"column_start":9,"column_end":16},"name":"aliases","qualname":"::build::app::App::aliases","value":"std::option::Option<std::vec::Vec<(&'b str, bool)>>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1832},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65287,"byte_end":65296,"line_start":91,"line_end":91,"column_start":9,"column_end":18},"name":"usage_str","qualname":"::build::app::App::usage_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1833},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65342,"byte_end":65347,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"name":"usage","qualname":"::build::app::App::usage","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1834},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65392,"byte_end":65400,"line_start":95,"line_end":95,"column_start":9,"column_end":17},"name":"help_str","qualname":"::build::app::App::help_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1835},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65446,"byte_end":65454,"line_start":97,"line_end":97,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::build::app::App::disp_ord","value":"usize","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1836},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65490,"byte_end":65496,"line_start":99,"line_end":99,"column_start":9,"column_end":15},"name":"term_w","qualname":"::build::app::App::term_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1837},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65540,"byte_end":65545,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"name":"max_w","qualname":"::build::app::App::max_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1838},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65589,"byte_end":65597,"line_start":103,"line_end":103,"column_start":9,"column_end":17},"name":"template","qualname":"::build::app::App::template","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1839},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65643,"byte_end":65651,"line_start":105,"line_end":105,"column_start":9,"column_end":17},"name":"settings","qualname":"::build::app::App::settings","value":"build::app::settings::AppFlags","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1840},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65690,"byte_end":65700,"line_start":107,"line_end":107,"column_start":9,"column_end":19},"name":"g_settings","qualname":"::build::app::App::g_settings","value":"build::app::settings::AppFlags","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65739,"byte_end":65743,"line_start":109,"line_end":109,"column_start":9,"column_end":13},"name":"args","qualname":"::build::app::App::args","value":"mkeymap::MKeyMap<'b>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1842},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65785,"byte_end":65796,"line_start":111,"line_end":111,"column_start":9,"column_end":20},"name":"subcommands","qualname":"::build::app::App::subcommands","value":"std::vec::Vec<build::app::App<'b>>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65839,"byte_end":65845,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"groups","qualname":"::build::app::App::groups","value":"std::vec::Vec<build::arg_group::ArgGroup<'b>>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1844},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65893,"byte_end":65906,"line_start":115,"line_end":115,"column_start":9,"column_end":22},"name":"help_headings","qualname":"::build::app::App::help_headings","value":"std::vec::Vec<std::option::Option<&'b str>>","parent":{"krate":0,"index":1819},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":66363,"byte_end":66366,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<App>::new","value":"fn <S> (n: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an application requiring a name. The name may be, but doesn't\n have to be, same as the binary. The name will be displayed to the user when they request to\n print version or help and usage information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":66599,"byte_end":66607,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"get_name","qualname":"<App>::get_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the app\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":66685,"byte_end":66697,"line_start":144,"line_end":144,"column_start":12,"column_end":24},"name":"get_bin_name","qualname":"<App>::get_bin_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the binary\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":67496,"byte_end":67502,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"author","qualname":"<App>::author","value":"fn <S> (mut self, author: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of author(s) that will be displayed to the user when they\n request the help information with `--help` or `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":68280,"byte_end":68288,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"bin_name","qualname":"<App>::bin_name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Overrides the system-determined binary name. This should only be used when absolutely\n necessary, such as when the binary name for your application is misleading, or perhaps\n *not* how the user should invoke your program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":69108,"byte_end":69113,"line_start":211,"line_end":211,"column_start":12,"column_end":17},"name":"about","qualname":"<App>::about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information with `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":70078,"byte_end":70088,"line_start":237,"line_end":237,"column_start":12,"column_end":22},"name":"long_about","qualname":"<App>::long_about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":71014,"byte_end":71018,"line_start":264,"line_end":264,"column_start":12,"column_end":16},"name":"name","qualname":"<App>::name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the program's name. This will be displayed when displaying help information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":71620,"byte_end":71630,"line_start":281,"line_end":281,"column_start":12,"column_end":22},"name":"after_help","qualname":"<App>::after_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **after** the auto-generated help information. This is often used\n to describe how to use the arguments, or caveats to be noted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":72190,"byte_end":72201,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"before_help","qualname":"<App>::before_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **before** the auto-generated help information. This is often used\n for header information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":73255,"byte_end":73262,"line_start":324,"line_end":324,"column_start":12,"column_end":19},"name":"version","qualname":"<App>::version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":74419,"byte_end":74431,"line_start":355,"line_end":355,"column_start":12,"column_end":24},"name":"long_version","qualname":"<App>::long_version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `--version`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":75273,"byte_end":75287,"line_start":379,"line_end":379,"column_start":12,"column_end":26},"name":"override_usage","qualname":"<App>::override_usage","value":"fn <S> (mut self, usage: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Overrides the `clap` generated usage string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":76806,"byte_end":76819,"line_start":418,"line_end":418,"column_start":12,"column_end":25},"name":"override_help","qualname":"<App>::override_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Overrides the `clap` generated help message. This should only be used\n when the auto-generated message does not suffice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":78807,"byte_end":78820,"line_start":461,"line_end":461,"column_start":12,"column_end":25},"name":"help_template","qualname":"<App>::help_template","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help template to be used, overriding the default format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":79406,"byte_end":79413,"line_start":481,"line_end":481,"column_start":12,"column_end":19},"name":"setting","qualname":"<App>::setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single command, or [``], level settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":79996,"byte_end":80009,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"unset_setting","qualname":"<App>::unset_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables a single command, or [``], level setting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":80693,"byte_end":80707,"line_start":522,"line_end":522,"column_start":12,"column_end":26},"name":"global_setting","qualname":"<App>::global_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single setting that is propagated down through all child subcommands.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":81433,"byte_end":81453,"line_start":544,"line_end":544,"column_start":12,"column_end":32},"name":"unset_global_setting","qualname":"<App>::unset_global_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables a global setting, and stops propagating down to child subcommands.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":82620,"byte_end":82634,"line_start":575,"line_end":575,"column_start":12,"column_end":26},"name":"set_term_width","qualname":"<App>::set_term_width","value":"fn (mut self, width: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will\n ignore terminal widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":83628,"byte_end":83642,"line_start":603,"line_end":603,"column_start":12,"column_end":26},"name":"max_term_width","qualname":"<App>::max_term_width","value":"fn (mut self, w: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal\n widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":84480,"byte_end":84483,"line_start":629,"line_end":629,"column_start":12,"column_end":15},"name":"arg","qualname":"<App>::arg","value":"fn <A> (mut self, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to the list of valid possibilities.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":84992,"byte_end":85004,"line_start":643,"line_end":643,"column_start":12,"column_end":24},"name":"help_heading","qualname":"<App>::help_heading","value":"fn (mut self, heading: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set a custom section heading for future args. Every call to arg will\n have this header (instead of its default header) until a subsequent\n call to help_heading\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":85166,"byte_end":85186,"line_start":649,"line_end":649,"column_start":12,"column_end":32},"name":"stop_custom_headings","qualname":"<App>::stop_custom_headings","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Stop using custom section headings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":85704,"byte_end":85708,"line_start":668,"line_end":668,"column_start":12,"column_end":16},"name":"args","qualname":"<App>::args","value":"fn <I, T> (mut self, args: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to the list of valid possibilities.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":86833,"byte_end":86838,"line_start":697,"line_end":697,"column_start":12,"column_end":17},"name":"alias","qualname":"<App>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [``] alias, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":88035,"byte_end":88042,"line_start":726,"line_end":726,"column_start":12,"column_end":19},"name":"aliases","qualname":"<App>::aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [``] aliases, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":88960,"byte_end":88973,"line_start":752,"line_end":752,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<App>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [``] alias that functions exactly like those defined with\n [`App::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":89862,"byte_end":89877,"line_start":776,"line_end":776,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<App>::visible_aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [``] aliases that functions exactly like those defined\n with [`App::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":91790,"byte_end":91795,"line_start":820,"line_end":820,"column_start":12,"column_end":17},"name":"group","qualname":"<App>::group","value":"fn (mut self, group: ArgGroup<'b>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\n By placing them in a logical group, you can build easier requirement and exclusion rules.\n For instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\n one) argument from that group must be present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":92788,"byte_end":92794,"line_start":849,"line_end":849,"column_start":12,"column_end":18},"name":"groups","qualname":"<App>::groups","value":"fn (mut self, groups: &[ArgGroup<'b>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [`ArgGroup`]s to the [`App`] at once.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":93631,"byte_end":93641,"line_start":873,"line_end":873,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<App>::subcommand","value":"fn (mut self, subcmd: App<'b>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds a [``] to the list of valid possibilities. Subcommands are effectively\n sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\n etc. They also function just like [`App`]s, in that they get their own auto generated help,\n version, and usage.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":94392,"byte_end":94403,"line_start":894,"line_end":894,"column_start":12,"column_end":23},"name":"subcommands","qualname":"<App>::subcommands","value":"fn <I> (mut self, subcmds: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple subcommands to the list of valid possibilities by iterating over an\n [`IntoIterator`] of [``]s","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":96730,"byte_end":96743,"line_start":951,"line_end":951,"column_start":12,"column_end":25},"name":"display_order","qualname":"<App>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of [``]s within the help message. Subcommands with a lower\n value will be displayed first in the help message. This is helpful when one would like to\n emphasise frequently used subcommands, or prioritize those towards the top of the list.\n Duplicate values **are** allowed. Subcommands with duplicate display orders will be\n displayed in alphabetical order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":97544,"byte_end":97551,"line_start":979,"line_end":979,"column_start":12,"column_end":19},"name":"mut_arg","qualname":"<App>::mut_arg","value":"fn <T, F> (mut self, arg_id: T, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows one to mutate an [`Arg`] after it's been added to an `App`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":98692,"byte_end":98702,"line_start":1012,"line_end":1012,"column_start":12,"column_end":22},"name":"print_help","qualname":"<App>::print_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `-h` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":99823,"byte_end":99838,"line_start":1039,"line_end":1039,"column_start":12,"column_end":27},"name":"print_long_help","qualname":"<App>::print_long_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `--help` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":100943,"byte_end":100953,"line_start":1067,"line_end":1067,"column_start":12,"column_end":22},"name":"write_help","qualname":"<App>::write_help","value":"fn <W> (&mut self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `-h`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":101892,"byte_end":101907,"line_start":1092,"line_end":1092,"column_start":12,"column_end":27},"name":"write_long_help","qualname":"<App>::write_long_help","value":"fn <W> (&mut self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `--help`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":102826,"byte_end":102839,"line_start":1116,"line_end":1116,"column_start":12,"column_end":25},"name":"write_version","qualname":"<App>::write_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":103682,"byte_end":103700,"line_start":1137,"line_end":1137,"column_start":12,"column_end":30},"name":"write_long_version","qualname":"<App>::write_long_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":103869,"byte_end":103883,"line_start":1142,"line_end":1142,"column_start":12,"column_end":26},"name":"generate_usage","qualname":"<App>::generate_usage","value":"fn (&mut self) -> String","parent":null,"children":[],"decl_id":null,"docs":" @TODO-v3-alpha @docs @p2: write docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":104926,"byte_end":104937,"line_start":1168,"line_end":1168,"column_start":12,"column_end":23},"name":"get_matches","qualname":"<App>::get_matches","value":"fn (self) -> ArgMatches","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process, upon a failed parse an error will be displayed to the user and\n the process will exit with the appropriate error code. By default this method gets all user\n provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\n which are legal on many platforms.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":105497,"byte_end":105512,"line_start":1183,"line_end":1183,"column_start":12,"column_end":27},"name":"get_matches_mut","qualname":"<App>::get_matches_mut","value":"fn (&mut self) -> ArgMatches","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process, just like [`App::get_matches`] but doesn't consume the `App`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":107550,"byte_end":107565,"line_start":1228,"line_end":1228,"column_start":12,"column_end":27},"name":"try_get_matches","qualname":"<App>::try_get_matches","value":"fn (self) -> ClapResult<ArgMatches>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\n the process on failed parse. By default this method gets matches from [`env::args_os`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":108691,"byte_end":108707,"line_start":1254,"line_end":1254,"column_start":12,"column_end":28},"name":"get_matches_from","qualname":"<App>::get_matches_from","value":"fn <I, T> (mut self, itr: I) -> ArgMatches","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\n and will automatically exit with an error message. This method, however, lets you specify\n what iterator to use when performing matches, such as a [`Vec`] of your making.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":111158,"byte_end":111178,"line_start":1311,"line_end":1311,"column_start":12,"column_end":32},"name":"try_get_matches_from","qualname":"<App>::try_get_matches_from","value":"fn <I, T> (mut self, itr: I) -> ClapResult<ArgMatches>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. A combination of [`App::get_matches_from`], and\n [`App::try_get_matches`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":112322,"byte_end":112346,"line_start":1340,"line_end":1340,"column_start":12,"column_end":36},"name":"try_get_matches_from_mut","qualname":"<App>::try_get_matches_from_mut","value":"fn <I, T> (&mut self, itr: I) -> ClapResult<ArgMatches>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\n the desired functionality, instead prefer [`App::try_get_matches_from`] which *does*\n consume `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":114610,"byte_end":114616,"line_start":1411,"line_end":1411,"column_start":12,"column_end":18},"name":"_build","qualname":"<App>::_build","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":117564,"byte_end":117574,"line_start":1491,"line_end":1491,"column_start":12,"column_end":22},"name":"_propagate","qualname":"<App>::_propagate","value":"fn (&mut self, prop: Propagation) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":124134,"byte_end":124150,"line_start":1676,"line_end":1676,"column_start":12,"column_end":28},"name":"_build_bin_names","qualname":"<App>::_build_bin_names","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":126762,"byte_end":126767,"line_start":1753,"line_end":1753,"column_start":12,"column_end":17},"name":"color","qualname":"<App>::color","value":"fn (&self) -> ColorWhen","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127458,"byte_end":127464,"line_start":1775,"line_end":1775,"column_start":12,"column_end":18},"name":"is_set","qualname":"<App>::is_set","value":"fn (&self, s: AppSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127577,"byte_end":127580,"line_start":1779,"line_end":1779,"column_start":12,"column_end":15},"name":"set","qualname":"<App>::set","value":"fn (&mut self, s: AppSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127645,"byte_end":127655,"line_start":1781,"line_end":1781,"column_start":12,"column_end":22},"name":"set_global","qualname":"<App>::set_global","value":"fn (&mut self, s: AppSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127722,"byte_end":127734,"line_start":1783,"line_end":1783,"column_start":12,"column_end":24},"name":"unset_global","qualname":"<App>::unset_global","value":"fn (&mut self, s: AppSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127803,"byte_end":127808,"line_start":1785,"line_end":1785,"column_start":12,"column_end":17},"name":"unset","qualname":"<App>::unset","value":"fn (&mut self, s: AppSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127875,"byte_end":127890,"line_start":1787,"line_end":1787,"column_start":12,"column_end":27},"name":"has_subcommands","qualname":"<App>::has_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":127951,"byte_end":127959,"line_start":1789,"line_end":1789,"column_start":12,"column_end":20},"name":"has_args","qualname":"<App>::has_args","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128013,"byte_end":128021,"line_start":1791,"line_end":1791,"column_start":12,"column_end":20},"name":"has_opts","qualname":"<App>::has_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128077,"byte_end":128086,"line_start":1793,"line_end":1793,"column_start":12,"column_end":21},"name":"has_flags","qualname":"<App>::has_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128143,"byte_end":128158,"line_start":1795,"line_end":1795,"column_start":12,"column_end":27},"name":"has_positionals","qualname":"<App>::has_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128221,"byte_end":128237,"line_start":1797,"line_end":1797,"column_start":12,"column_end":28},"name":"has_visible_opts","qualname":"<App>::has_visible_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128321,"byte_end":128338,"line_start":1799,"line_end":1799,"column_start":12,"column_end":29},"name":"has_visible_flags","qualname":"<App>::has_visible_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128423,"byte_end":128446,"line_start":1801,"line_end":1801,"column_start":12,"column_end":35},"name":"has_visible_positionals","qualname":"<App>::has_visible_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":128549,"byte_end":128572,"line_start":1805,"line_end":1805,"column_start":12,"column_end":35},"name":"has_visible_subcommands","qualname":"<App>::has_visible_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2066},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":339862,"byte_end":339870,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"ArgFlags","qualname":"::build::arg::settings::ArgFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":339851,"byte_end":339878,"line_start":34,"line_end":34,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":339907,"byte_end":339910,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2078},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341625,"byte_end":341633,"line_start":79,"line_end":79,"column_start":5,"column_end":13},"name":"Required","qualname":"::build::arg::settings::ArgSettings::Required","value":"ArgSettings::Required","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Specifies that an arg must be used\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2080},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341687,"byte_end":341701,"line_start":81,"line_end":81,"column_start":5,"column_end":19},"name":"MultipleValues","qualname":"::build::arg::settings::ArgSettings::MultipleValues","value":"ArgSettings::MultipleValues","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Allows an arg to accept multiple values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2082},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341754,"byte_end":341773,"line_start":83,"line_end":83,"column_start":5,"column_end":24},"name":"MultipleOccurrences","qualname":"::build::arg::settings::ArgSettings::MultipleOccurrences","value":"ArgSettings::MultipleOccurrences","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Allows an arg to appear multiple times\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2084},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341834,"byte_end":341850,"line_start":85,"line_end":85,"column_start":5,"column_end":21},"name":"AllowEmptyValues","qualname":"::build::arg::settings::ArgSettings::AllowEmptyValues","value":"ArgSettings::AllowEmptyValues","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Allows an arg accept empty values such as `\"\"`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2086},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341899,"byte_end":341905,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::build::arg::settings::ArgSettings::Hidden","value":"ArgSettings::Hidden","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Hides an arg from the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2088},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341981,"byte_end":341991,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"TakesValue","qualname":"::build::arg::settings::ArgSettings::TakesValue","value":"ArgSettings::TakesValue","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Allows an argument to take a value (such as `--option value`)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2090},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342177,"byte_end":342194,"line_start":92,"line_end":92,"column_start":5,"column_end":22},"name":"UseValueDelimiter","qualname":"::build::arg::settings::ArgSettings::UseValueDelimiter","value":"ArgSettings::UseValueDelimiter","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Enables a delimiter to break up arguments `--option val1,val2,val3` becomes three values\n (`val1`, `val2`, and `val3`) instead of the default one (`val1,val2,val3`)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2092},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342295,"byte_end":342307,"line_start":94,"line_end":94,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::build::arg::settings::ArgSettings::NextLineHelp","value":"ArgSettings::NextLineHelp","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Tells an arg to display it's help on the line below the arg itself in the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2094},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342377,"byte_end":342393,"line_start":96,"line_end":96,"column_start":5,"column_end":21},"name":"RequireDelimiter","qualname":"::build::arg::settings::ArgSettings::RequireDelimiter","value":"ArgSettings::RequireDelimiter","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Says that arg *must* use a delimiter to separate values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2096},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342455,"byte_end":342473,"line_start":98,"line_end":98,"column_start":5,"column_end":23},"name":"HidePossibleValues","qualname":"::build::arg::settings::ArgSettings::HidePossibleValues","value":"ArgSettings::HidePossibleValues","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Hides the possible values from the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2098},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342526,"byte_end":342543,"line_start":100,"line_end":100,"column_start":5,"column_end":22},"name":"AllowHyphenValues","qualname":"::build::arg::settings::ArgSettings::AllowHyphenValues","value":"ArgSettings::AllowHyphenValues","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Allows values that start with a hyphen\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2100},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342646,"byte_end":342659,"line_start":102,"line_end":102,"column_start":5,"column_end":18},"name":"RequireEquals","qualname":"::build::arg::settings::ArgSettings::RequireEquals","value":"ArgSettings::RequireEquals","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Requires that an equals be used to provide a value to an option such as `--option=value`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2102},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342851,"byte_end":342855,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"Last","qualname":"::build::arg::settings::ArgSettings::Last","value":"ArgSettings::Last","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Says that a positional arg will be the last positional, and reuqires `--` to be accessed.\n It can also be accessed early (i.e. before other positionals) by providing `--`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2104},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342915,"byte_end":342931,"line_start":107,"line_end":107,"column_start":5,"column_end":21},"name":"HideDefaultValue","qualname":"::build::arg::settings::ArgSettings::HideDefaultValue","value":"ArgSettings::HideDefaultValue","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Hides the default value from the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2106},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":342985,"byte_end":342995,"line_start":109,"line_end":109,"column_start":5,"column_end":15},"name":"IgnoreCase","qualname":"::build::arg::settings::ArgSettings::IgnoreCase","value":"ArgSettings::IgnoreCase","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Possible values become case insensitive\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2108},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343123,"byte_end":343136,"line_start":112,"line_end":112,"column_start":5,"column_end":18},"name":"HideEnvValues","qualname":"::build::arg::settings::ArgSettings::HideEnvValues","value":"ArgSettings::HideEnvValues","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" Hides any values currently assigned to ENV variables in the help message (good for sensitive\n information)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2110},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343206,"byte_end":343221,"line_start":114,"line_end":114,"column_start":5,"column_end":20},"name":"HiddenShortHelp","qualname":"::build::arg::settings::ArgSettings::HiddenShortHelp","value":"ArgSettings::HiddenShortHelp","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in short help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2112},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343290,"byte_end":343304,"line_start":116,"line_end":116,"column_start":5,"column_end":19},"name":"HiddenLongHelp","qualname":"::build::arg::settings::ArgSettings::HiddenLongHelp","value":"ArgSettings::HiddenLongHelp","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in long help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2114},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343329,"byte_end":343346,"line_start":118,"line_end":118,"column_start":5,"column_end":22},"name":"RequiredUnlessAll","qualname":"::build::arg::settings::ArgSettings::RequiredUnlessAll","value":"ArgSettings::RequiredUnlessAll","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2116},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343371,"byte_end":343391,"line_start":120,"line_end":120,"column_start":5,"column_end":25},"name":"ValueDelimiterNotSet","qualname":"::build::arg::settings::ArgSettings::ValueDelimiterNotSet","value":"ArgSettings::ValueDelimiterNotSet","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2077},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341564,"byte_end":341575,"line_start":77,"line_end":77,"column_start":10,"column_end":21},"name":"ArgSettings","qualname":"::build::arg::settings::ArgSettings","value":"ArgSettings::{Required, MultipleValues, MultipleOccurrences, AllowEmptyValues, Hidden, TakesValue, UseValueDelimiter, NextLineHelp, RequireDelimiter, HidePossibleValues, AllowHyphenValues, RequireEquals, Last, HideDefaultValue, IgnoreCase, HideEnvValues, HiddenShortHelp, HiddenLongHelp, RequiredUnlessAll, ValueDelimiterNotSet}","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2094},{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116}],"decl_id":null,"docs":" Various settings that apply to arguments and may be set, unset, and checked via getter/setter\n methods [`Arg::setting`], [`Arg::unset_setting`], and [`Arg::is_set`]. This is what the\n [`Arg`] methods which accept a `bool` use internally.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":341555,"byte_end":343394,"line_start":77,"line_end":121,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2125},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":178971,"byte_end":178974,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"Arg","qualname":"::build::arg::Arg","value":"Arg { id, name, help, long_help, blacklist, settings, r_unless, overrides, groups, requires, short, long, aliases, disp_ord, unified_ord, possible_vals, val_names, num_vals, max_vals, min_vals, validator, validator_os, val_delim, default_vals, default_vals_ifs, env, terminator, index, r_ifs, help_heading, global }","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157}],"decl_id":null,"docs":" The abstract representation of a command line argument. Used to set all the options and\n relationships that define a valid argument for the program.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":178894,"byte_end":178933,"line_start":54,"line_end":54,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2127},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179011,"byte_end":179013,"line_start":58,"line_end":58,"column_start":9,"column_end":11},"name":"id","qualname":"::build::arg::Arg::id","value":"u64","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2128},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179046,"byte_end":179050,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"name":"name","qualname":"::build::arg::Arg::name","value":"&'help str","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2129},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179091,"byte_end":179095,"line_start":62,"line_end":62,"column_start":9,"column_end":13},"name":"help","qualname":"::build::arg::Arg::help","value":"std::option::Option<&'help str>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2130},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179144,"byte_end":179153,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"long_help","qualname":"::build::arg::Arg::long_help","value":"std::option::Option<&'help str>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2131},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179202,"byte_end":179211,"line_start":66,"line_end":66,"column_start":9,"column_end":18},"name":"blacklist","qualname":"::build::arg::Arg::blacklist","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2132},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179257,"byte_end":179265,"line_start":68,"line_end":68,"column_start":9,"column_end":17},"name":"settings","qualname":"::build::arg::Arg::settings","value":"build::arg::settings::ArgFlags","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2133},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179304,"byte_end":179312,"line_start":70,"line_end":70,"column_start":9,"column_end":17},"name":"r_unless","qualname":"::build::arg::Arg::r_unless","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2134},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179358,"byte_end":179367,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"name":"overrides","qualname":"::build::arg::Arg::overrides","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2135},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179413,"byte_end":179419,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"groups","qualname":"::build::arg::Arg::groups","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2136},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179465,"byte_end":179473,"line_start":76,"line_end":76,"column_start":9,"column_end":17},"name":"requires","qualname":"::build::arg::Arg::requires","value":"std::option::Option<std::vec::Vec<(std::option::Option<&'help str>, u64)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2137},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179541,"byte_end":179546,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"name":"short","qualname":"::build::arg::Arg::short","value":"std::option::Option<char>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2138},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179589,"byte_end":179593,"line_start":80,"line_end":80,"column_start":9,"column_end":13},"name":"long","qualname":"::build::arg::Arg::long","value":"std::option::Option<&'help str>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2139},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179642,"byte_end":179649,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"name":"aliases","qualname":"::build::arg::Arg::aliases","value":"std::option::Option<std::vec::Vec<(&'help str, bool)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2140},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179730,"byte_end":179738,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::build::arg::Arg::disp_ord","value":"usize","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2141},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179774,"byte_end":179785,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"unified_ord","qualname":"::build::arg::Arg::unified_ord","value":"usize","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179821,"byte_end":179834,"line_start":88,"line_end":88,"column_start":9,"column_end":22},"name":"possible_vals","qualname":"::build::arg::Arg::possible_vals","value":"std::option::Option<std::vec::Vec<&'help str>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2143},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179888,"byte_end":179897,"line_start":90,"line_end":90,"column_start":9,"column_end":18},"name":"val_names","qualname":"::build::arg::Arg::val_names","value":"std::option::Option<vec_map::VecMap<&'help str>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2144},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":179954,"byte_end":179962,"line_start":92,"line_end":92,"column_start":9,"column_end":17},"name":"num_vals","qualname":"::build::arg::Arg::num_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2145},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180004,"byte_end":180012,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"name":"max_vals","qualname":"::build::arg::Arg::max_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2146},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180054,"byte_end":180062,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"min_vals","qualname":"::build::arg::Arg::min_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180104,"byte_end":180113,"line_start":98,"line_end":98,"column_start":9,"column_end":18},"name":"validator","qualname":"::build::arg::Arg::validator","value":"std::option::Option<std::rc::Rc<(dyn std::ops::Fn(std::string::String) -> std::result::Result<(), std::string::String> + 'static)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2148},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180161,"byte_end":180173,"line_start":100,"line_end":100,"column_start":9,"column_end":21},"name":"validator_os","qualname":"::build::arg::Arg::validator_os","value":"std::option::Option<std::rc::Rc<(dyn for<'r> std::ops::Fn(&'r std::ffi::OsStr) -> std::result::Result<(), std::string::String> + 'static)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2149},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180223,"byte_end":180232,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"val_delim","qualname":"::build::arg::Arg::val_delim","value":"std::option::Option<char>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2150},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180275,"byte_end":180287,"line_start":104,"line_end":104,"column_start":9,"column_end":21},"name":"default_vals","qualname":"::build::arg::Arg::default_vals","value":"std::option::Option<std::vec::Vec<&'help std::ffi::OsStr>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2151},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180343,"byte_end":180359,"line_start":106,"line_end":106,"column_start":9,"column_end":25},"name":"default_vals_ifs","qualname":"::build::arg::Arg::default_vals_ifs","value":"std::option::Option<vec_map::VecMap<(u64, std::option::Option<&'help std::ffi::OsStr>, &'help std::ffi::OsStr)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2152},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180446,"byte_end":180449,"line_start":108,"line_end":108,"column_start":9,"column_end":12},"name":"env","qualname":"::build::arg::Arg::env","value":"std::option::Option<(&'help std::ffi::OsStr, std::option::Option<std::ffi::OsString>)>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2153},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180520,"byte_end":180530,"line_start":110,"line_end":110,"column_start":9,"column_end":19},"name":"terminator","qualname":"::build::arg::Arg::terminator","value":"std::option::Option<&'help str>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2154},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180579,"byte_end":180584,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"index","qualname":"::build::arg::Arg::index","value":"std::option::Option<u64>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2155},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180626,"byte_end":180631,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"name":"r_ifs","qualname":"::build::arg::Arg::r_ifs","value":"std::option::Option<std::vec::Vec<(u64, &'help str)>>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2156},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180691,"byte_end":180703,"line_start":116,"line_end":116,"column_start":9,"column_end":21},"name":"help_heading","qualname":"::build::arg::Arg::help_heading","value":"std::option::Option<&'help str>","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2157},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180752,"byte_end":180758,"line_start":118,"line_end":118,"column_start":9,"column_end":15},"name":"global","qualname":"::build::arg::Arg::global","value":"bool","parent":{"krate":0,"index":2125},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180851,"byte_end":180854,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Arg>::new","value":"fn <T> (t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" @TODO @p2 @docs @v3-beta1: Write Docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":181802,"byte_end":181811,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Arg>::with_name","value":"fn (n: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\n information about whether or not the argument was used at runtime, get values, set\n relationships with other args, etc..","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":187003,"byte_end":187008,"line_start":269,"line_end":269,"column_start":12,"column_end":17},"name":"short","qualname":"<Arg>::short","value":"fn (mut self, s: char) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short version of the argument without the preceding `-`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":188439,"byte_end":188443,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"long","qualname":"<Arg>::long","value":"fn (mut self, l: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long version of the argument without the preceding `--`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":189408,"byte_end":189413,"line_start":335,"line_end":335,"column_start":12,"column_end":17},"name":"alias","qualname":"<Arg>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden arguments as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":190573,"byte_end":190580,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"aliases","qualname":"<Arg>::aliases","value":"fn (mut self, names: &[&'help str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":191675,"byte_end":191688,"line_start":396,"line_end":396,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<Arg>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias that functions exactly like those defined with\n [`Arg::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":192647,"byte_end":192662,"line_start":423,"line_end":423,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<Arg>::visible_aliases","value":"fn (mut self, names: &[&'help str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [`Arg`] aliases that functions exactly like those defined\n with [`Arg::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":194783,"byte_end":194787,"line_start":484,"line_end":484,"column_start":12,"column_end":16},"name":"help","qualname":"<Arg>::help","value":"fn (mut self, h: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short help text of the argument that will be displayed to the user when they print\n the help information with `-h`. Typically, this is a short (one line) description of the\n arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":197344,"byte_end":197353,"line_start":555,"line_end":555,"column_start":12,"column_end":21},"name":"long_help","qualname":"<Arg>::long_help","value":"fn (mut self, h: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long help text of the argument that will be displayed to the user when they print\n the help information with `--help`. Typically this a more detailed (multi-line) message\n that describes the arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":199486,"byte_end":199501,"line_start":616,"line_end":616,"column_start":12,"column_end":27},"name":"required_unless","qualname":"<Arg>::required_unless","value":"fn <T> (mut self, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an arg that override this arg's required setting. (i.e. this arg will be required\n unless this other argument is present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":202098,"byte_end":202117,"line_start":689,"line_end":689,"column_start":12,"column_end":31},"name":"required_unless_all","qualname":"<Arg>::required_unless_all","value":"fn (mut self, names: &[&str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's required setting. (i.e. this arg will be required unless\n all these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":204871,"byte_end":204890,"line_start":764,"line_end":764,"column_start":12,"column_end":31},"name":"required_unless_one","qualname":"<Arg>::required_unless_one","value":"fn (mut self, names: &[&str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's [required] setting. (i.e. this arg will be required\n unless *at least one of* these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":206613,"byte_end":206627,"line_start":812,"line_end":812,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<Arg>::conflicts_with","value":"fn <T> (mut self, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a conflicting argument by name. I.e. when using this argument,\n the following argument can't be present and vice versa.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":208502,"byte_end":208520,"line_start":863,"line_end":863,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<Arg>::conflicts_with_all","value":"fn (mut self, names: &[&str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per\n argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":213829,"byte_end":213843,"line_start":975,"line_end":975,"column_start":12,"column_end":26},"name":"overrides_with","qualname":"<Arg>::overrides_with","value":"fn <T> (mut self, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a overridable argument by name. I.e. this argument and the following argument\n will override each other in POSIX style (whichever argument was specified at runtime\n **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":215418,"byte_end":215436,"line_start":1012,"line_end":1012,"column_start":12,"column_end":30},"name":"overrides_with_all","qualname":"<Arg>::overrides_with_all","value":"fn <T> (mut self, names: &[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple mutually overridable arguments by name. I.e. this argument and the following\n argument will override each other in POSIX style (whichever argument was specified at\n runtime **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":217685,"byte_end":217693,"line_start":1078,"line_end":1078,"column_start":12,"column_end":20},"name":"requires","qualname":"<Arg>::requires","value":"fn <T> (mut self, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an argument by name that is required when this one is present I.e. when\n using this argument, the following argument *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":220087,"byte_end":220098,"line_start":1149,"line_end":1149,"column_start":12,"column_end":23},"name":"requires_if","qualname":"<Arg>::requires_if","value":"fn <T> (mut self, val: &'help str, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows a conditional requirement. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":222213,"byte_end":222225,"line_start":1210,"line_end":1210,"column_start":12,"column_end":24},"name":"requires_ifs","qualname":"<Arg>::requires_ifs","value":"fn <T> (mut self, ifs: &[(&'help str, T)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows multiple conditional requirements. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":224906,"byte_end":224917,"line_start":1288,"line_end":1288,"column_start":12,"column_end":23},"name":"required_if","qualname":"<Arg>::required_if","value":"fn <T> (mut self, arg_id: T, val: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] conditionally. The requirement will only\n become valid if the specified `arg`'s value equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":228073,"byte_end":228085,"line_start":1378,"line_end":1378,"column_start":12,"column_end":24},"name":"required_ifs","qualname":"<Arg>::required_ifs","value":"fn <T> (mut self, ifs: &[(T, &'help str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] based on multiple conditions. The\n conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid\n if one of the specified `arg`'s value equals it's corresponding `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":230762,"byte_end":230774,"line_start":1455,"line_end":1455,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<Arg>::requires_all","value":"fn <T> (mut self, names: &[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple arguments by names that are required when this one is present I.e. when\n using this argument, the following arguments *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":233137,"byte_end":233142,"line_start":1517,"line_end":1517,"column_start":12,"column_end":17},"name":"index","qualname":"<Arg>::index","value":"fn (mut self, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the index of a positional argument **starting at** 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":235232,"byte_end":235248,"line_start":1567,"line_end":1567,"column_start":12,"column_end":28},"name":"value_terminator","qualname":"<Arg>::value_terminator","value":"fn (mut self, term: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a value that *stops* parsing multiple values of a give argument. By default when\n one sets [`multiple(true)`] on an argument, clap will continue parsing values for that\n argument until it reaches another valid argument, or one of the other more specific settings\n for multiple values is used (such as [`min_values`], [`max_values`] or\n [`number_of_values`]).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":237084,"byte_end":237099,"line_start":1620,"line_end":1620,"column_start":12,"column_end":27},"name":"possible_values","qualname":"<Arg>::possible_values","value":"fn (mut self, names: &[&'help str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a list of possible values for this argument. At runtime, `clap` verifies that\n only one of the specified values was used, or fails with an error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":239286,"byte_end":239300,"line_start":1685,"line_end":1685,"column_start":12,"column_end":26},"name":"possible_value","qualname":"<Arg>::possible_value","value":"fn (mut self, name: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\n that only one of the specified values was used, or fails with error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":240464,"byte_end":240469,"line_start":1725,"line_end":1725,"column_start":12,"column_end":17},"name":"group","qualname":"<Arg>::group","value":"fn <T> (mut self, group_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name of the [`ArgGroup`] the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":241707,"byte_end":241713,"line_start":1766,"line_end":1766,"column_start":12,"column_end":18},"name":"groups","qualname":"<Arg>::groups","value":"fn <T> (mut self, group_ids: &[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":243408,"byte_end":243424,"line_start":1813,"line_end":1813,"column_start":12,"column_end":28},"name":"number_of_values","qualname":"<Arg>::number_of_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies how many values are required to satisfy this argument. For example, if you had a\n `-f <file>` argument where you wanted exactly 3 'files' you would set\n `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n 3 and only 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":245364,"byte_end":245373,"line_start":1855,"line_end":1855,"column_start":12,"column_end":21},"name":"validator","qualname":"<Arg>::validator","value":"fn <F, O, E> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows one to perform a custom validation on the argument value. You provide a closure\n which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\n message displayed to the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":247051,"byte_end":247063,"line_start":1896,"line_end":1896,"column_start":12,"column_end":24},"name":"validator_os","qualname":"<Arg>::validator_os","value":"fn <F, O> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Works identically to Validator but is intended to be used with values that could\n contain non UTF-8 formatted strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":249367,"byte_end":249377,"line_start":1960,"line_end":1960,"column_start":12,"column_end":22},"name":"max_values","qualname":"<Arg>::max_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *maximum* number of values are for this argument. For example, if you had a\n `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\n this argument would be satisfied if the user provided, 1, 2, or 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":251671,"byte_end":251681,"line_start":2024,"line_end":2024,"column_start":12,"column_end":22},"name":"min_values","qualname":"<Arg>::min_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *minimum* number of values for this argument. For example, if you had a\n `-f <file>` argument where you wanted at least 2 'files' you would set\n `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\n values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":252675,"byte_end":252690,"line_start":2052,"line_end":2052,"column_start":12,"column_end":27},"name":"value_delimiter","qualname":"<Arg>::value_delimiter","value":"fn (mut self, d: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the separator to use when values are clumped together, defaults to `,` (comma).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":255517,"byte_end":255528,"line_start":2123,"line_end":2123,"column_start":12,"column_end":23},"name":"value_names","qualname":"<Arg>::value_names","value":"fn (mut self, names: &[&'help str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify multiple names for values of option arguments. These names are cosmetic only, used\n for help and usage strings only. The names are **not** used to access arguments. The values\n of the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n `two` `one` will be the first matched value, `two` will be the second).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":257791,"byte_end":257801,"line_start":2191,"line_end":2191,"column_start":12,"column_end":22},"name":"value_name","qualname":"<Arg>::value_name","value":"fn (mut self, name: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name for value of [option] or [positional] arguments inside of help\n documentation. This name is cosmetic only, the name is **not** used to access arguments.\n This setting can be very helpful when describing the type of input the user should be\n using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\n use all capital letters for the value name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":261163,"byte_end":261176,"line_start":2267,"line_end":2267,"column_start":12,"column_end":25},"name":"default_value","qualname":"<Arg>::default_value","value":"fn (self, val: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument when *not* specified at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":261562,"byte_end":261578,"line_start":2275,"line_end":2275,"column_start":12,"column_end":28},"name":"default_value_os","qualname":"<Arg>::default_value_os","value":"fn (self, val: &'help OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a default value in the exact same manner as [`Arg::default_value`]\n only using [`OsStr`]s instead.\n [`Arg::default_value`]: ./struct.Arg.html#method.default_value\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":261814,"byte_end":261828,"line_start":2281,"line_end":2281,"column_start":12,"column_end":26},"name":"default_values","qualname":"<Arg>::default_values","value":"fn (self, vals: &[&'help str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like [`Arg::default_value'] but for args taking multiple values\n [`Arg::default_value`]: ./struct.Arg.html#method.default_value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":262335,"byte_end":262352,"line_start":2293,"line_end":2293,"column_start":12,"column_end":29},"name":"default_values_os","qualname":"<Arg>::default_values_os","value":"fn (mut self, vals: &[&'help OsStr]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides default values in the exact same manner as [`Arg::default_values`]\n only using [`OsStr`]s instead.\n [`Arg::default_values`]: ./struct.Arg.html#method.default_values\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":266148,"byte_end":266164,"line_start":2395,"line_end":2395,"column_start":12,"column_end":28},"name":"default_value_if","qualname":"<Arg>::default_value_if","value":"fn <T> (self, arg_id: T, val: Option<&'help str>, default: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to\n `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be\n present at runtime **and** have the value `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":266763,"byte_end":266782,"line_start":2412,"line_end":2412,"column_start":12,"column_end":31},"name":"default_value_if_os","qualname":"<Arg>::default_value_if_os","value":"fn <T> (mut self, arg_id: T, val: Option<&'help OsStr>, default: &'help OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\n only using [`OsStr`]s instead.\n [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":270287,"byte_end":270304,"line_start":2515,"line_end":2515,"column_start":12,"column_end":29},"name":"default_value_ifs","qualname":"<Arg>::default_value_ifs","value":"fn <T> (mut self, ifs: &[(T, Option<&'help str>, &'help str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n The method takes a slice of tuples in the `(arg, Option<val>, default)` format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":271044,"byte_end":271064,"line_start":2534,"line_end":2534,"column_start":12,"column_end":32},"name":"default_value_ifs_os","qualname":"<Arg>::default_value_ifs_os","value":"fn <T> (mut self, ifs: &[(T, Option<&'help OsStr>, &'help OsStr)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides multiple conditional default values in the exact same manner as\n [`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":274775,"byte_end":274778,"line_start":2643,"line_end":2643,"column_start":12,"column_end":15},"name":"env","qualname":"<Arg>::env","value":"fn (self, name: &'help str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment, if available. If it is not present in the environment, then default\n rules will apply.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":275076,"byte_end":275082,"line_start":2648,"line_end":2648,"column_start":12,"column_end":18},"name":"env_os","qualname":"<Arg>::env_os","value":"fn (mut self, name: &'help OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment if available in the exact same manner as [`Arg::env`] only using\n [`OsStr`]s instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":277674,"byte_end":277687,"line_start":2712,"line_end":2712,"column_start":12,"column_end":25},"name":"display_order","qualname":"<Arg>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of args within the help message. Args with a lower value will be\n displayed first in the help message. This is helpful when one would like to emphasise\n frequently used args, or prioritize those towards the top of the list. Duplicate values\n **are** allowed. Args with duplicate display orders will be displayed in alphabetical\n order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":281231,"byte_end":281235,"line_start":2792,"line_end":2792,"column_start":12,"column_end":16},"name":"last","qualname":"<Arg>::last","value":"fn (self, l: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that this arg is the last, or final, positional argument (i.e. has the highest\n index) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\n last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax\n they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\n allows one to access this arg early using the `--` syntax. Accessing an arg early, even with\n the `--` syntax is otherwise not possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":283503,"byte_end":283511,"line_start":2851,"line_end":2851,"column_start":12,"column_end":20},"name":"required","qualname":"<Arg>::required","value":"fn (self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument is required by default. Required by default means it is\n required, when no other conflicting rules or overrides have been evaluated. Conflicting\n rules take precedence over being required.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":285382,"byte_end":285393,"line_start":2898,"line_end":2898,"column_start":12,"column_end":23},"name":"takes_value","qualname":"<Arg>::takes_value","value":"fn (self, tv: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument takes a value at run time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":288260,"byte_end":288279,"line_start":2965,"line_end":2965,"column_start":12,"column_end":31},"name":"allow_hyphen_values","qualname":"<Arg>::allow_hyphen_values","value":"fn (self, a: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows values which start with a leading hyphen (`-`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":290285,"byte_end":290299,"line_start":3023,"line_end":3023,"column_start":12,"column_end":26},"name":"require_equals","qualname":"<Arg>::require_equals","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Requires that options use the `--option=val` syntax (i.e. an equals between the option and\n associated value) **Default:** `false`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":292345,"byte_end":292351,"line_start":3075,"line_end":3075,"column_start":12,"column_end":18},"name":"global","qualname":"<Arg>::global","value":"fn (mut self, g: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that an argument can be matched to all child [``]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":295551,"byte_end":295568,"line_start":3149,"line_end":3149,"column_start":12,"column_end":29},"name":"require_delimiter","qualname":"<Arg>::require_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that *multiple values* may only be set using the delimiter. This means if an\n if an option is encountered, and no delimiter is found, it automatically assumed that no\n additional values for that option follow. This is unlike the default, where it is generally\n assumed that more values will follow regardless of whether or not a delimiter is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":297053,"byte_end":297073,"line_start":3189,"line_end":3189,"column_start":12,"column_end":32},"name":"hide_possible_values","qualname":"<Arg>::hide_possible_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies if the possible values of an argument should be displayed in the help text or\n not. Defaults to `false` (i.e. show possible values)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":298210,"byte_end":298228,"line_start":3224,"line_end":3224,"column_start":12,"column_end":30},"name":"hide_default_value","qualname":"<Arg>::hide_default_value","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the default value of an argument should not be displayed in the help text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":299507,"byte_end":299513,"line_start":3270,"line_end":3270,"column_start":12,"column_end":18},"name":"hidden","qualname":"<Arg>::hidden","value":"fn (self, h: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":301290,"byte_end":301306,"line_start":3320,"line_end":3320,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<Arg>::case_insensitive","value":"fn (self, ci: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When used with [`Arg::possible_values`] it allows the argument value to pass validation even\n if the case differs from that of the specified `possible_value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":303487,"byte_end":303500,"line_start":3375,"line_end":3375,"column_start":12,"column_end":25},"name":"use_delimiter","qualname":"<Arg>::use_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that an argument should allow grouping of multiple values via a\n delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\n and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\n value delimiter for all arguments that accept values (options and positional arguments)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":304971,"byte_end":304986,"line_start":3418,"line_end":3418,"column_start":12,"column_end":27},"name":"hide_env_values","qualname":"<Arg>::hide_env_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that any values inside the associated ENV variables of an argument should not be\n displayed in the help text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":306856,"byte_end":306870,"line_start":3470,"line_end":3470,"column_start":12,"column_end":26},"name":"next_line_help","qualname":"<Arg>::next_line_help","value":"fn (mut self, nlh: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set to `true` the help string will be displayed on the line after the argument and\n indented once. This can be helpful for arguments with very long or complex help messages.\n This can also be helpful for arguments with very long flag names, or many/long value names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":314972,"byte_end":314980,"line_start":3658,"line_end":3658,"column_start":12,"column_end":20},"name":"multiple","qualname":"<Arg>::multiple","value":"fn (mut self, multi: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument may have an unknown number of multiple values. Without any other\n settings, this argument may appear only *once*.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":316989,"byte_end":317004,"line_start":3717,"line_end":3717,"column_start":12,"column_end":27},"name":"multiple_values","qualname":"<Arg>::multiple_values","value":"fn (self, multi: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows an argument to accept explicitly empty values. An empty value must be specified at\n the command line with an explicit `\"\"`, `''`, or `--option=`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":319823,"byte_end":319843,"line_start":3786,"line_end":3786,"column_start":12,"column_end":32},"name":"multiple_occurrences","qualname":"<Arg>::multiple_occurrences","value":"fn (self, multi: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument may appear more than once.\n For flags, this results\n in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\n would count as three occurrences. For options or arguments that take a value, this\n *does not* affect how many values they can accept. (i.e. only one at a time is allowed)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":321128,"byte_end":321131,"line_start":3813,"line_end":3813,"column_start":12,"column_end":15},"name":"raw","qualname":"<Arg>::raw","value":"fn (self, raw: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that all parameters passed after this should not be parsed\n individually, but rather passed in their entirety. It is worth noting\n that setting this requires all values to come after a `--` to indicate they\n should all be captured. For example:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":323193,"byte_end":323210,"line_start":3884,"line_end":3884,"column_start":12,"column_end":29},"name":"hidden_short_help","qualname":"<Arg>::hidden_short_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from short help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":325374,"byte_end":325390,"line_start":3961,"line_end":3961,"column_start":12,"column_end":28},"name":"hidden_long_help","qualname":"<Arg>::hidden_long_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from long help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":325792,"byte_end":325798,"line_start":3972,"line_end":3972,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Arg>::is_set","value":"fn (&self, s: ArgSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if one of the [`ArgSettings`] is set for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":325985,"byte_end":325992,"line_start":3976,"line_end":3976,"column_start":12,"column_end":19},"name":"setting","qualname":"<Arg>::setting","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets one of the [`ArgSettings`] settings for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":326264,"byte_end":326272,"line_start":3984,"line_end":3984,"column_start":12,"column_end":20},"name":"settings","qualname":"<Arg>::settings","value":"fn (mut self, settings: &[ArgSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple [`ArgSettings`] for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":326531,"byte_end":326544,"line_start":3993,"line_end":3993,"column_start":12,"column_end":25},"name":"unset_setting","qualname":"<Arg>::unset_setting","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unsets one of the [`ArgSettings`] for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":326698,"byte_end":326710,"line_start":3999,"line_end":3999,"column_start":12,"column_end":24},"name":"help_heading","qualname":"<Arg>::help_heading","value":"fn (mut self, s: Option<&'help str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set a custom heading for this arg to be printed under\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":326835,"byte_end":326841,"line_start":4005,"line_end":4005,"column_start":12,"column_end":18},"name":"_build","qualname":"<Arg>::_build","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":327792,"byte_end":327796,"line_start":4031,"line_end":4031,"column_start":12,"column_end":16},"name":"setb","qualname":"<Arg>::setb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":327937,"byte_end":327943,"line_start":4035,"line_end":4035,"column_start":12,"column_end":18},"name":"unsetb","qualname":"<Arg>::unsetb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":328030,"byte_end":328040,"line_start":4038,"line_end":4038,"column_start":12,"column_end":22},"name":"has_switch","qualname":"<Arg>::has_switch","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":328135,"byte_end":328149,"line_start":4041,"line_end":4041,"column_start":12,"column_end":26},"name":"longest_filter","qualname":"<Arg>::longest_filter","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":328338,"byte_end":328350,"line_start":4047,"line_end":4047,"column_start":12,"column_end":24},"name":"multiple_str","qualname":"<Arg>::multiple_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":328783,"byte_end":328799,"line_start":4064,"line_end":4064,"column_start":12,"column_end":28},"name":"name_no_brackets","qualname":"<Arg>::name_no_brackets","value":"fn (&self) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2167},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351288,"byte_end":351296,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"ArgGroup","qualname":"::build::arg_group::ArgGroup","value":"ArgGroup { id, name, args, required, requires, conflicts, multiple }","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175}],"decl_id":null,"docs":" `ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these\n arguments\". By placing arguments in a logical group, you can create easier requirement and\n exclusion rules instead of having to list each argument individually, or when you want a rule\n to apply \"any but not all\" arguments.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2169},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351330,"byte_end":351332,"line_start":86,"line_end":86,"column_start":9,"column_end":11},"name":"id","qualname":"::build::arg_group::ArgGroup::id","value":"u64","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2170},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351365,"byte_end":351369,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"name","qualname":"::build::arg_group::ArgGroup::name","value":"&'a str","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2171},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351407,"byte_end":351411,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"name":"args","qualname":"::build::arg_group::ArgGroup::args","value":"std::vec::Vec<u64>","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2172},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351449,"byte_end":351457,"line_start":92,"line_end":92,"column_start":9,"column_end":17},"name":"required","qualname":"::build::arg_group::ArgGroup::required","value":"bool","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2173},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351492,"byte_end":351500,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"name":"requires","qualname":"::build::arg_group::ArgGroup::requires","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2174},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351546,"byte_end":351555,"line_start":96,"line_end":96,"column_start":9,"column_end":18},"name":"conflicts","qualname":"::build::arg_group::ArgGroup::conflicts","value":"std::option::Option<std::vec::Vec<u64>>","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2175},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351601,"byte_end":351609,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"name":"multiple","qualname":"::build::arg_group::ArgGroup::multiple","value":"bool","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351674,"byte_end":351682,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"_with_id","qualname":"<ArgGroup>::_with_id","value":"fn (id: Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351843,"byte_end":351846,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgGroup>::new","value":"fn <T> (id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" @TODO @p2 @docs @v3-beta1: Write Docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":352260,"byte_end":352269,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"with_name","qualname":"<ArgGroup>::with_name","value":"fn (n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\n get values from the group or refer to the group inside of conflict and requirement rules.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":353696,"byte_end":353699,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"arg","qualname":"<ArgGroup>::arg","value":"fn <T> (mut self, arg_id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":354535,"byte_end":354539,"line_start":194,"line_end":194,"column_start":12,"column_end":16},"name":"args","qualname":"<ArgGroup>::args","value":"fn <T> (mut self, ns: &[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":356282,"byte_end":356290,"line_start":241,"line_end":241,"column_start":12,"column_end":20},"name":"multiple","qualname":"<ArgGroup>::multiple","value":"fn (mut self, m: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":358011,"byte_end":358019,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"required","qualname":"<ArgGroup>::required","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the group as required or not. A required group will be displayed in the usage string\n of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states\n that one argument from this group *must* be present at runtime (unless\n conflicting with another argument).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":359436,"byte_end":359444,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"requires","qualname":"<ArgGroup>::requires","value":"fn <T> (mut self, id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when any one of the arguments from\n this group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":361151,"byte_end":361163,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<ArgGroup>::requires_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when one of the arguments from this\n group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":362509,"byte_end":362523,"line_start":391,"line_end":391,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<ArgGroup>::conflicts_with","value":"fn <T> (mut self, id: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":364091,"byte_end":364109,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<ArgGroup>::conflicts_with_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2208},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420545,"byte_end":420548,"line_start":7,"line_end":7,"column_start":12,"column_end":15},"name":"Key","qualname":"::mkeymap::Key","value":"Key { key, index }","parent":null,"children":[{"krate":0,"index":2209},{"krate":0,"index":2210}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2209},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420559,"byte_end":420562,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"name":"key","qualname":"::mkeymap::Key::key","value":"mkeymap::KeyType","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2210},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420581,"byte_end":420586,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"index","qualname":"::mkeymap::Key::index","value":"usize","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2218},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420653,"byte_end":420660,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"MKeyMap","qualname":"::mkeymap::MKeyMap","value":"MKeyMap { keys, args }","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2220},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420675,"byte_end":420679,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"name":"keys","qualname":"::mkeymap::MKeyMap::keys","value":"std::vec::Vec<mkeymap::Key>","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2221},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420699,"byte_end":420703,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"args","qualname":"::mkeymap::MKeyMap::args","value":"std::vec::Vec<build::arg::Arg<'b>>","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2237},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420852,"byte_end":420857,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"Short","qualname":"::mkeymap::KeyType::Short","value":"KeyType::Short(char)","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2240},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420869,"byte_end":420873,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"Long","qualname":"::mkeymap::KeyType::Long","value":"KeyType::Long(OsString)","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420889,"byte_end":420897,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"Position","qualname":"::mkeymap::KeyType::Position","value":"KeyType::Position(u64)","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2236},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420838,"byte_end":420845,"line_start":20,"line_end":20,"column_start":10,"column_end":17},"name":"KeyType","qualname":"::mkeymap::KeyType","value":"KeyType::{Short, Long, Position}","parent":null,"children":[{"krate":0,"index":2237},{"krate":0,"index":2240},{"krate":0,"index":2243}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420829,"byte_end":420905,"line_start":20,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421487,"byte_end":421490,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<MKeyMap>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421605,"byte_end":421618,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"contains_long","qualname":"<MKeyMap>::contains_long","value":"fn (&self, l: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421696,"byte_end":421710,"line_start":60,"line_end":60,"column_start":12,"column_end":26},"name":"contains_short","qualname":"<MKeyMap>::contains_short","value":"fn (&self, c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421788,"byte_end":421794,"line_start":62,"line_end":62,"column_start":12,"column_end":18},"name":"insert","qualname":"<MKeyMap>::insert","value":"fn (&mut self, key: KeyType, value: Arg<'b>) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421961,"byte_end":421965,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"push","qualname":"<MKeyMap>::push","value":"fn (&mut self, value: Arg<'b>) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":422244,"byte_end":422254,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<MKeyMap>::insert_key","value":"fn (&mut self, key: KeyType, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":422528,"byte_end":422531,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"get","qualname":"<MKeyMap>::get","value":"fn (&self, key: &KeyType) -> Option<&Arg<'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":422779,"byte_end":422786,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MKeyMap>::get_mut","value":"fn (&mut self, key: &KeyType) -> Option<&mut Arg<'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":423030,"byte_end":423038,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MKeyMap>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":423115,"byte_end":423125,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"remove_key","qualname":"<MKeyMap>::remove_key","value":"fn (&mut self, key: &KeyType) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":423356,"byte_end":423374,"line_start":121,"line_end":121,"column_start":12,"column_end":30},"name":"insert_key_by_name","qualname":"<MKeyMap>::insert_key_by_name","value":"fn (&mut self, key: KeyType, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":423522,"byte_end":423528,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"_build","qualname":"<MKeyMap>::_build","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":423767,"byte_end":423788,"line_start":137,"line_end":137,"column_start":12,"column_end":33},"name":"make_entries_by_index","qualname":"<MKeyMap>::make_entries_by_index","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":424621,"byte_end":424633,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"find_by_name","qualname":"<MKeyMap>::find_by_name","value":"fn (&mut self, name: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":424808,"byte_end":424814,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"remove","qualname":"<MKeyMap>::remove","value":"fn (&mut self, key: &KeyType) -> Option<Arg<'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":425562,"byte_end":425576,"line_start":199,"line_end":199,"column_start":12,"column_end":26},"name":"remove_by_name","qualname":"<MKeyMap>::remove_by_name","value":"fn (&mut self, _name: Id) -> Option<Arg<'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2298},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":487127,"byte_end":487131,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Auto","qualname":"::output::fmt::ColorWhen::Auto","value":"ColorWhen::Auto","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2300},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":487137,"byte_end":487143,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Always","qualname":"::output::fmt::ColorWhen::Always","value":"ColorWhen::Always","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2302},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":487149,"byte_end":487154,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Never","qualname":"::output::fmt::ColorWhen::Never","value":"ColorWhen::Never","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2297},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":487111,"byte_end":487120,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"ColorWhen","qualname":"::output::fmt::ColorWhen","value":"ColorWhen::{Auto, Always, Never}","parent":null,"children":[{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":2302}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":487102,"byte_end":487157,"line_start":14,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2313},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489500,"byte_end":489505,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Error","qualname":"::output::fmt::Format::Error","value":"Format::Error(T)","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Defines the style used for errors, defaults to Red\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2316},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489578,"byte_end":489585,"line_start":123,"line_end":123,"column_start":5,"column_end":12},"name":"Warning","qualname":"::output::fmt::Format::Warning","value":"Format::Warning(T)","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Defines the style used for warnings, defaults to Yellow\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489660,"byte_end":489664,"line_start":125,"line_end":125,"column_start":5,"column_end":9},"name":"Good","qualname":"::output::fmt::Format::Good","value":"Format::Good(T)","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Defines the style used for good values, defaults to Green\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2322},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489709,"byte_end":489713,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"None","qualname":"::output::fmt::Format::None","value":"Format::None(T)","parent":{"krate":0,"index":2311},"children":[],"decl_id":null,"docs":" Defines no formatting style\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2311},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489425,"byte_end":489431,"line_start":119,"line_end":119,"column_start":10,"column_end":16},"name":"Format","qualname":"::output::fmt::Format","value":"Format::{Error, Warning, Good, None}","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2316},{"krate":0,"index":2319},{"krate":0,"index":2322}],"decl_id":null,"docs":" Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow,\n and Good=Green\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":846},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":492514,"byte_end":492520,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Result","qualname":"::parse::errors::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Short hand for [`Result`] type","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2329},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":493249,"byte_end":493261,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::parse::errors::ErrorKind::InvalidValue","value":"ErrorKind::InvalidValue","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when an [`Arg`] has a set of possible values,\n and the user provides a value which isn't in that set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2331},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":493726,"byte_end":493741,"line_start":53,"line_end":53,"column_start":5,"column_end":20},"name":"UnknownArgument","qualname":"::parse::errors::ErrorKind::UnknownArgument","value":"ErrorKind::UnknownArgument","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when a user provides a flag, option, argument or subcommand which isn't defined.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2333},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":494798,"byte_end":494815,"line_start":77,"line_end":77,"column_start":5,"column_end":22},"name":"InvalidSubcommand","qualname":"::parse::errors::ErrorKind::InvalidSubcommand","value":"ErrorKind::InvalidSubcommand","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [``] which meets the threshold for\n being similar enough to an existing subcommand.\n If it doesn't meet the threshold, or the 'suggestions' feature is disabled,\n the more general [`UnknownArgument`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":496037,"byte_end":496059,"line_start":104,"line_end":104,"column_start":5,"column_end":27},"name":"UnrecognizedSubcommand","qualname":"::parse::errors::ErrorKind::UnrecognizedSubcommand","value":"ErrorKind::UnrecognizedSubcommand","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [``] which either\n doesn't meet the threshold for being similar enough to an existing subcommand,\n or the 'suggestions' feature is disabled.\n Otherwise the more detailed [`InvalidSubcommand`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":496612,"byte_end":496622,"line_start":121,"line_end":121,"column_start":5,"column_end":15},"name":"EmptyValue","qualname":"::parse::errors::ErrorKind::EmptyValue","value":"ErrorKind::EmptyValue","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides an empty value for an option that does not allow empty\n values.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2339},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":497392,"byte_end":497407,"line_start":144,"line_end":144,"column_start":5,"column_end":20},"name":"ValueValidation","qualname":"::parse::errors::ErrorKind::ValueValidation","value":"ErrorKind::ValueValidation","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value for an argument with a custom validation and the\n value fails that validation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2341},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":498028,"byte_end":498041,"line_start":162,"line_end":162,"column_start":5,"column_end":18},"name":"TooManyValues","qualname":"::parse::errors::ErrorKind::TooManyValues","value":"ErrorKind::TooManyValues","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when a user provides more values for an argument than were defined by setting\n [`Arg::max_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2343},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":498664,"byte_end":498676,"line_start":180,"line_end":180,"column_start":5,"column_end":17},"name":"TooFewValues","qualname":"::parse::errors::ErrorKind::TooFewValues","value":"ErrorKind::TooFewValues","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides fewer values for an argument than were defined by setting\n [`Arg::min_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2345},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":499517,"byte_end":499536,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"WrongNumberOfValues","qualname":"::parse::errors::ErrorKind::WrongNumberOfValues","value":"ErrorKind::WrongNumberOfValues","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides a different number of values for an argument than what's\n been defined by setting [`Arg::number_of_values`] or than was implicitly set by\n [`Arg::value_names`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2347},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":500170,"byte_end":500186,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"ArgumentConflict","qualname":"::parse::errors::ErrorKind::ArgumentConflict","value":"ErrorKind::ArgumentConflict","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides two values which conflict with each other and can't be used\n together.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2349},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":500654,"byte_end":500677,"line_start":236,"line_end":236,"column_start":5,"column_end":28},"name":"MissingRequiredArgument","qualname":"::parse::errors::ErrorKind::MissingRequiredArgument","value":"ErrorKind::MissingRequiredArgument","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user does not provide one or more required arguments.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2351},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":501364,"byte_end":501381,"line_start":256,"line_end":256,"column_start":5,"column_end":22},"name":"MissingSubcommand","qualname":"::parse::errors::ErrorKind::MissingSubcommand","value":"ErrorKind::MissingSubcommand","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\n but the user does not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":502256,"byte_end":502283,"line_start":277,"line_end":277,"column_start":5,"column_end":32},"name":"MissingArgumentOrSubcommand","qualname":"::parse::errors::ErrorKind::MissingArgumentOrSubcommand","value":"ErrorKind::MissingArgumentOrSubcommand","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when either an argument or [``] is required, as defined by\n [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2355},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":502822,"byte_end":502845,"line_start":293,"line_end":293,"column_start":5,"column_end":28},"name":"UnexpectedMultipleUsage","qualname":"::parse::errors::ErrorKind::UnexpectedMultipleUsage","value":"ErrorKind::UnexpectedMultipleUsage","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides multiple values to an argument which doesn't allow that.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2357},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":503939,"byte_end":503950,"line_start":321,"line_end":321,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::parse::errors::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value containing invalid UTF-8 for an argument and\n [`AppSettings::StrictUtf8`] is set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2359},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":504540,"byte_end":504553,"line_start":338,"line_end":338,"column_start":5,"column_end":18},"name":"HelpDisplayed","qualname":"::parse::errors::ErrorKind::HelpDisplayed","value":"ErrorKind::HelpDisplayed","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--help` or similar was used.\n The help message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2361},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":504993,"byte_end":505009,"line_start":352,"line_end":352,"column_start":5,"column_end":21},"name":"VersionDisplayed","qualname":"::parse::errors::ErrorKind::VersionDisplayed","value":"ErrorKind::VersionDisplayed","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--version` or similar was used.\n The message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2363},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":505383,"byte_end":505399,"line_start":359,"line_end":359,"column_start":5,"column_end":21},"name":"ArgumentNotFound","qualname":"::parse::errors::ErrorKind::ArgumentNotFound","value":"ErrorKind::ArgumentNotFound","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value\n into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\n with name `config` to be converted, but `config` wasn't used by the user.\n [`value_t!`]: ./macro.value_t!.html\n [`values_t!`]: ./macro.values_t!.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2365},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":505601,"byte_end":505603,"line_start":364,"line_end":364,"column_start":5,"column_end":7},"name":"Io","qualname":"::parse::errors::ErrorKind::Io","value":"ErrorKind::Io","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Represents an [I/O error].\n Can occur when writing to `stderr` or `stdout` or reading a configuration file.\n [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2367},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":505899,"byte_end":505905,"line_start":371,"line_end":371,"column_start":5,"column_end":11},"name":"Format","qualname":"::parse::errors::ErrorKind::Format","value":"ErrorKind::Format","parent":{"krate":0,"index":2328},"children":[],"decl_id":null,"docs":" Represents a [Format error] (which is a part of [`Display`]).\n Typically caused by writing to `stderr` or `stdout`.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2328},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":492645,"byte_end":492654,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::parse::errors::ErrorKind","value":"ErrorKind::{InvalidValue, UnknownArgument, InvalidSubcommand, UnrecognizedSubcommand, EmptyValue, ValueValidation, TooManyValues, TooFewValues, WrongNumberOfValues, ArgumentConflict, MissingRequiredArgument, MissingSubcommand, MissingArgumentOrSubcommand, UnexpectedMultipleUsage, InvalidUtf8, HelpDisplayed, VersionDisplayed, ArgumentNotFound, Io, Format}","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":2337},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2353},{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2359},{"krate":0,"index":2361},{"krate":0,"index":2363},{"krate":0,"index":2365},{"krate":0,"index":2367}],"decl_id":null,"docs":" Command line argument parser kind of error\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":492636,"byte_end":505908,"line_start":22,"line_end":372,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2376},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":505977,"byte_end":505982,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"Error","qualname":"::parse::errors::Error","value":"Error { cause, message, kind, info }","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2380}],"decl_id":null,"docs":" Command Line Argument Parser Error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2377},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506024,"byte_end":506029,"line_start":378,"line_end":378,"column_start":9,"column_end":14},"name":"cause","qualname":"::parse::errors::Error::cause","value":"std::string::String","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" The cause of the error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2378},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506131,"byte_end":506138,"line_start":380,"line_end":380,"column_start":9,"column_end":16},"name":"message","qualname":"::parse::errors::Error::message","value":"std::string::String","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" Formatted error message, enhancing the cause message with extra information\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2379},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506182,"byte_end":506186,"line_start":382,"line_end":382,"column_start":9,"column_end":13},"name":"kind","qualname":"::parse::errors::Error::kind","value":"parse::errors::ErrorKind","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" The type of error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2380},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506304,"byte_end":506308,"line_start":384,"line_end":384,"column_start":9,"column_end":13},"name":"info","qualname":"::parse::errors::Error::info","value":"std::option::Option<std::vec::Vec<std::string::String>>","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" Any additional information passed along, such as the argument name that caused the error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506674,"byte_end":506684,"line_start":398,"line_end":398,"column_start":12,"column_end":22},"name":"use_stderr","qualname":"<Error>::use_stderr","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should the message be written to `stdout` or not\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506924,"byte_end":506928,"line_start":406,"line_end":406,"column_start":12,"column_end":16},"name":"exit","qualname":"<Error>::exit","value":"fn (&self) -> !","parent":null,"children":[],"decl_id":null,"docs":" Prints the error to `stderr` and exits with a status of `1`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":507245,"byte_end":507253,"line_start":417,"line_end":417,"column_start":12,"column_end":20},"name":"write_to","qualname":"<Error>::write_to","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":507365,"byte_end":507379,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"group_conflict","qualname":"<Error>::group_conflict","value":"fn <O, U> (group: &ArgGroup, other: Option<O>, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":509047,"byte_end":509064,"line_start":475,"line_end":475,"column_start":12,"column_end":29},"name":"argument_conflict","qualname":"<Error>::argument_conflict","value":"fn <O, U> (arg: &Arg, other: Option<O>, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":510717,"byte_end":510728,"line_start":525,"line_end":525,"column_start":12,"column_end":23},"name":"empty_value","qualname":"<Error>::empty_value","value":"fn <U> (arg: &Arg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":511579,"byte_end":511592,"line_start":554,"line_end":554,"column_start":12,"column_end":25},"name":"invalid_value","qualname":"<Error>::invalid_value","value":"fn <B, G, U> (bad_val: B, good_vals: &[G], arg: &Arg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":513140,"byte_end":513158,"line_start":607,"line_end":607,"column_start":12,"column_end":30},"name":"invalid_subcommand","qualname":"<Error>::invalid_subcommand","value":"fn <S, D, N, U> (subcmd: S, did_you_mean: D, name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":514356,"byte_end":514379,"line_start":649,"line_end":649,"column_start":12,"column_end":35},"name":"unrecognized_subcommand","qualname":"<Error>::unrecognized_subcommand","value":"fn <S, N> (subcmd: S, name: N, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":515248,"byte_end":515273,"line_start":678,"line_end":678,"column_start":12,"column_end":37},"name":"missing_required_argument","qualname":"<Error>::missing_required_argument","value":"fn <R, U> (required: R, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":516097,"byte_end":516115,"line_start":707,"line_end":707,"column_start":12,"column_end":30},"name":"missing_subcommand","qualname":"<Error>::missing_subcommand","value":"fn <N, U> (name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":516897,"byte_end":516909,"line_start":733,"line_end":733,"column_start":12,"column_end":24},"name":"invalid_utf8","qualname":"<Error>::invalid_utf8","value":"fn <U> (usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":517602,"byte_end":517617,"line_start":757,"line_end":757,"column_start":12,"column_end":27},"name":"too_many_values","qualname":"<Error>::too_many_values","value":"fn <V, U> (val: V, arg: &Arg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":518642,"byte_end":518656,"line_start":789,"line_end":789,"column_start":12,"column_end":26},"name":"too_few_values","qualname":"<Error>::too_few_values","value":"fn <U> (arg: &Arg, min_vals: u64, curr_vals: usize, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":519822,"byte_end":519838,"line_start":828,"line_end":828,"column_start":12,"column_end":28},"name":"value_validation","qualname":"<Error>::value_validation","value":"fn (arg: Option<&Arg>, err: &str, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":520737,"byte_end":520758,"line_start":859,"line_end":859,"column_start":12,"column_end":33},"name":"value_validation_auto","qualname":"<Error>::value_validation_auto","value":"fn (err: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":520910,"byte_end":520932,"line_start":865,"line_end":865,"column_start":12,"column_end":34},"name":"wrong_number_of_values","qualname":"<Error>::wrong_number_of_values","value":"fn <U> (arg: &Arg, num_vals: u64, curr_vals: usize, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":522075,"byte_end":522100,"line_start":904,"line_end":904,"column_start":12,"column_end":37},"name":"unexpected_multiple_usage","qualname":"<Error>::unexpected_multiple_usage","value":"fn <U> (arg: &Arg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":523012,"byte_end":523028,"line_start":933,"line_end":933,"column_start":12,"column_end":28},"name":"unknown_argument","qualname":"<Error>::unknown_argument","value":"fn <A, U> (arg: A, did_you_mean: Option<String>, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":524374,"byte_end":524382,"line_start":980,"line_end":980,"column_start":12,"column_end":20},"name":"io_error","qualname":"<Error>::io_error","value":"fn (e: &Error, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":524782,"byte_end":524805,"line_start":994,"line_end":994,"column_start":12,"column_end":35},"name":"argument_not_found_auto","qualname":"<Error>::argument_not_found_auto","value":"fn <A> (arg: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":525545,"byte_end":525561,"line_start":1019,"line_end":1019,"column_start":12,"column_end":28},"name":"with_description","qualname":"<Error>::with_description","value":"fn (description: &str, kind: ErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an error with a custom description.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2394},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538516,"byte_end":538526,"line_start":65,"line_end":65,"column_start":12,"column_end":22},"name":"ArgMatches","qualname":"::parse::matches::arg_matches::ArgMatches","value":"ArgMatches { args, subcommand }","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2396}],"decl_id":null,"docs":" Used to get information about the arguments that were supplied to the program at runtime by\n the user. New instances of this struct are obtained by using the [`App::get_matches`] family of\n methods.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2395},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538556,"byte_end":538560,"line_start":67,"line_end":67,"column_start":9,"column_end":13},"name":"args","qualname":"::parse::matches::arg_matches::ArgMatches::args","value":"indexmap::map::IndexMap<u64, parse::matches::matched_arg::MatchedArg>","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2396},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538615,"byte_end":538625,"line_start":69,"line_end":69,"column_start":9,"column_end":19},"name":"subcommand","qualname":"::parse::matches::arg_matches::ArgMatches::subcommand","value":"std::option::Option<std::boxed::Box<parse::matches::subcommand::SubCommand>>","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538869,"byte_end":538872,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgMatches>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":540095,"byte_end":540103,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"value_of","qualname":"<ArgMatches>::value_of","value":"fn <T> (&self, id: T) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\n an additional value at runtime). If the option wasn't present at runtime\n it returns `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":541510,"byte_end":541524,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"value_of_lossy","qualname":"<ArgMatches>::value_of_lossy","value":"fn <T> (&self, id: T) -> Option<Cow<'_, str>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy value of a specific argument. If the argument wasn't present at runtime\n it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\n invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":543232,"byte_end":543243,"line_start":184,"line_end":184,"column_start":12,"column_end":23},"name":"value_of_os","qualname":"<ArgMatches>::value_of_os","value":"fn <T> (&self, id: T) -> Option<&OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OS version of a string value of a specific argument. If the option wasn't present\n at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\n regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\n Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\n value may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":544386,"byte_end":544395,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"values_of","qualname":"<ArgMatches>::values_of","value":"fn <T> (&self, id: T) -> Option<Values<'_>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n (i.e. an argument that takes multiple values at runtime). If the option wasn't present at\n runtime it returns `None`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":545892,"byte_end":545907,"line_start":250,"line_end":250,"column_start":12,"column_end":27},"name":"values_of_lossy","qualname":"<ArgMatches>::values_of_lossy","value":"fn <T> (&self, id: T) -> Option<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy values of a specific argument. If the option wasn't present at runtime\n it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\n those invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":547836,"byte_end":547848,"line_start":290,"line_end":290,"column_start":12,"column_end":24},"name":"values_of_os","qualname":"<ArgMatches>::values_of_os","value":"fn <'a, T> (&'a self, id: T) -> Option<OsValues<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\n specific argument. If the option wasn't present at runtime it returns `None`. An OS value\n on Unix-like systems is any series of bytes, regardless of whether or not they contain\n valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\n filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":548605,"byte_end":548615,"line_start":314,"line_end":314,"column_start":12,"column_end":22},"name":"is_present","qualname":"<ArgMatches>::is_present","value":"fn <T> (&self, id: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if an argument was present at runtime, otherwise `false`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":548711,"byte_end":548725,"line_start":317,"line_end":317,"column_start":12,"column_end":26},"name":"_id_is_present","qualname":"<ArgMatches>::_id_is_present","value":"fn (&self, arg_id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":550316,"byte_end":550330,"line_start":365,"line_end":365,"column_start":12,"column_end":26},"name":"occurrences_of","qualname":"<ArgMatches>::occurrences_of","value":"fn <T> (&self, id: T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of times an argument was used at runtime. If an argument isn't present\n it will return `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":555868,"byte_end":555876,"line_start":499,"line_end":499,"column_start":12,"column_end":20},"name":"index_of","qualname":"<ArgMatches>::index_of","value":"fn <T> (&self, name: T) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the starting index of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":559489,"byte_end":559499,"line_start":581,"line_end":581,"column_start":12,"column_end":22},"name":"indices_of","qualname":"<ArgMatches>::indices_of","value":"fn <T> (&self, id: T) -> Option<Indices<'_>>","parent":null,"children":[],"decl_id":null,"docs":" Gets all indices of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":560909,"byte_end":560927,"line_start":618,"line_end":618,"column_start":12,"column_end":30},"name":"subcommand_matches","qualname":"<ArgMatches>::subcommand_matches","value":"fn <T> (&self, id: T) -> Option<&ArgMatches>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\n the subcommand wasn't present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":563802,"byte_end":563817,"line_start":685,"line_end":685,"column_start":12,"column_end":27},"name":"subcommand_name","qualname":"<ArgMatches>::subcommand_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know\n which subcommand was actually used. This method returns the name of the subcommand that was\n used at runtime, or `None` if one wasn't.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":565949,"byte_end":565959,"line_start":734,"line_end":734,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<ArgMatches>::subcommand","value":"fn (&self) -> (&str, Option<&ArgMatches>)","parent":null,"children":[],"decl_id":null,"docs":" This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\n by returning a tuple with both pieces of information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2401},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567078,"byte_end":567084,"line_start":769,"line_end":769,"column_start":12,"column_end":18},"name":"Values","qualname":"::parse::matches::arg_matches::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":2403}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\n method.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567027,"byte_end":567066,"line_start":768,"line_end":768,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2407},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":568856,"byte_end":568864,"line_start":821,"line_end":821,"column_start":12,"column_end":20},"name":"OsValues","qualname":"::parse::matches::arg_matches::OsValues","value":"OsValues {  }","parent":null,"children":[{"krate":0,"index":2409}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\n method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n [`Values`].","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":568805,"byte_end":568844,"line_start":820,"line_end":820,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2413},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570406,"byte_end":570413,"line_start":873,"line_end":873,"column_start":12,"column_end":19},"name":"Indices","qualname":"::parse::matches::arg_matches::Indices","value":"Indices {  }","parent":null,"children":[{"krate":0,"index":2415}],"decl_id":null,"docs":" An iterator for getting multiple indices out of an argument via the [`ArgMatches::indices_of`]\n method.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570355,"byte_end":570394,"line_start":872,"line_end":872,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2419},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572435,"byte_end":572445,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"MatchedArg","qualname":"::parse::matches::matched_arg::MatchedArg","value":"MatchedArg { occurs, indices, vals }","parent":null,"children":[{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2420},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572475,"byte_end":572481,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"name":"occurs","qualname":"::parse::matches::matched_arg::MatchedArg::occurs","value":"u64","parent":{"krate":0,"index":2419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2421},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572515,"byte_end":572522,"line_start":10,"line_end":10,"column_start":9,"column_end":16},"name":"indices","qualname":"::parse::matches::matched_arg::MatchedArg::indices","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2422},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572563,"byte_end":572567,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"name":"vals","qualname":"::parse::matches::matched_arg::MatchedArg::vals","value":"std::vec::Vec<std::ffi::OsString>","parent":{"krate":0,"index":2419},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572799,"byte_end":572802,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchedArg>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2427},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/subcommand.rs","byte_start":573825,"byte_end":573835,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"SubCommand","qualname":"::parse::matches::subcommand::SubCommand","value":"SubCommand { id, name, matches }","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430}],"decl_id":null,"docs":" The abstract representation of a command line subcommand.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2428},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/subcommand.rs","byte_start":573865,"byte_end":573867,"line_start":30,"line_end":30,"column_start":9,"column_end":11},"name":"id","qualname":"::parse::matches::subcommand::SubCommand::id","value":"u64","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2429},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/subcommand.rs","byte_start":573900,"byte_end":573904,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"name","qualname":"::parse::matches::subcommand::SubCommand::name","value":"std::string::String","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2430},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/subcommand.rs","byte_start":573941,"byte_end":573948,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"name":"matches","qualname":"::parse::matches::subcommand::SubCommand::matches","value":"parse::matches::arg_matches::ArgMatches","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1339},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660080,"byte_end":660083,"line_start":9,"line_end":9,"column_start":11,"column_end":14},"name":"Key","qualname":"::util::fnv::Key","value":"Key: Hash","parent":null,"children":[{"krate":0,"index":1340}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660099,"byte_end":660102,"line_start":10,"line_end":10,"column_start":8,"column_end":11},"name":"key","qualname":"::util::fnv::Key::key","value":"fn (&self) -> u64","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1412},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21909,"byte_end":21913,"line_start":556,"line_end":556,"column_start":11,"column_end":15},"name":"Clap","qualname":"::Clap","value":"Clap: From<ArgMatches> + IntoApp + Sized","parent":null,"children":[],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1413},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21989,"byte_end":22003,"line_start":559,"line_end":559,"column_start":11,"column_end":25},"name":"FromArgMatches","qualname":"::FromArgMatches","value":"FromArgMatches: Sized","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22049,"byte_end":22064,"line_start":561,"line_end":561,"column_start":8,"column_end":23},"name":"from_argmatches","qualname":"::FromArgMatches::from_argmatches","value":"fn (matches: &crate::parse::ArgMatches) -> Self","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22147,"byte_end":22166,"line_start":564,"line_end":564,"column_start":8,"column_end":27},"name":"try_from_argmatches","qualname":"::FromArgMatches::try_from_argmatches","value":"fn (matches: &crate::parse::ArgMatches) -> StdResult<Self, crate::parse::errors::Error>","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1416},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22375,"byte_end":22382,"line_start":572,"line_end":572,"column_start":11,"column_end":18},"name":"IntoApp","qualname":"::IntoApp","value":"IntoApp: Sized","parent":null,"children":[{"krate":0,"index":1417}],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22428,"byte_end":22436,"line_start":574,"line_end":574,"column_start":8,"column_end":16},"name":"into_app","qualname":"::IntoApp::into_app","value":"fn <'b> () -> crate::build::App<'b>","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1419},"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22507,"byte_end":22514,"line_start":578,"line_end":578,"column_start":11,"column_end":18},"name":"ArgEnum","qualname":"::ArgEnum","value":"ArgEnum","parent":null,"children":[],"decl_id":null,"docs":" @TODO @release @docs\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138061,"byte_end":138069,"line_start":56,"line_end":56,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138183,"byte_end":138191,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138278,"byte_end":138286,"line_start":65,"line_end":65,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169711,"byte_end":169722,"line_start":905,"line_end":905,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65942,"byte_end":65945,"line_start":118,"line_end":118,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":113537,"byte_end":113540,"line_start":1373,"line_end":1373,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":126506,"byte_end":126509,"line_start":1746,"line_end":1746,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":135889,"byte_end":135892,"line_start":2014,"line_end":2014,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":339885,"byte_end":339893,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":340982,"byte_end":340990,"line_start":64,"line_end":64,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343413,"byte_end":343424,"line_start":123,"line_end":123,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180781,"byte_end":180784,"line_start":121,"line_end":121,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":365},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":329787,"byte_end":329790,"line_start":4092,"line_end":4092,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":329889,"byte_end":329892,"line_start":4096,"line_end":4096,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":330005,"byte_end":330008,"line_start":4100,"line_end":4100,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":330118,"byte_end":330121,"line_start":4104,"line_end":4104,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333323,"byte_end":333326,"line_start":4202,"line_end":4202,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333445,"byte_end":333448,"line_start":4206,"line_end":4206,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333554,"byte_end":333557,"line_start":4210,"line_end":4210,"column_start":20,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333596,"byte_end":333599,"line_start":4212,"line_end":4212,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351629,"byte_end":351637,"line_start":101,"line_end":101,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":364262,"byte_end":364270,"line_start":439,"line_end":439,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":364695,"byte_end":364703,"line_start":455,"line_end":455,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":370149,"byte_end":370157,"line_start":637,"line_end":637,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/usage_parser.rs","byte_start":370911,"byte_end":370922,"line_start":27,"line_end":27,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420912,"byte_end":420919,"line_start":26,"line_end":26,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421101,"byte_end":421108,"line_start":35,"line_end":35,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421297,"byte_end":421304,"line_start":44,"line_end":44,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421462,"byte_end":421469,"line_start":53,"line_end":53,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":431558,"byte_end":431562,"line_start":49,"line_end":49,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":433279,"byte_end":433283,"line_start":103,"line_end":103,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":448989,"byte_end":448993,"line_start":518,"line_end":518,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":453113,"byte_end":453117,"line_start":632,"line_end":632,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":464622,"byte_end":464626,"line_start":958,"line_end":958,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/usage.rs","byte_start":471449,"byte_end":471454,"line_start":20,"line_end":20,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":764},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":488019,"byte_end":488028,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489102,"byte_end":489111,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489800,"byte_end":489806,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":490615,"byte_end":490621,"line_start":156,"line_end":156,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506339,"byte_end":506344,"line_start":387,"line_end":387,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":866},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":525945,"byte_end":525950,"line_start":1033,"line_end":1033,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526026,"byte_end":526031,"line_start":1037,"line_end":1037,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526163,"byte_end":526168,"line_start":1041,"line_end":1041,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526298,"byte_end":526303,"line_start":1045,"line_end":1045,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530791,"byte_end":530801,"line_start":20,"line_end":20,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530885,"byte_end":530895,"line_start":24,"line_end":24,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530997,"byte_end":531007,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538676,"byte_end":538686,"line_start":72,"line_end":72,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538826,"byte_end":538836,"line_start":81,"line_end":81,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":997},{"krate":0,"index":1001},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567180,"byte_end":567186,"line_start":773,"line_end":773,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567394,"byte_end":567400,"line_start":780,"line_end":780,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567514,"byte_end":567520,"line_start":784,"line_end":784,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567581,"byte_end":567587,"line_start":787,"line_end":787,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":568962,"byte_end":568970,"line_start":825,"line_end":825,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569182,"byte_end":569190,"line_start":832,"line_end":832,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569306,"byte_end":569314,"line_start":836,"line_end":836,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569375,"byte_end":569383,"line_start":839,"line_end":839,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570560,"byte_end":570567,"line_start":878,"line_end":878,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570771,"byte_end":570778,"line_start":885,"line_end":885,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570890,"byte_end":570897,"line_start":889,"line_end":889,"column_start":32,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570958,"byte_end":570965,"line_start":892,"line_end":892,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572604,"byte_end":572614,"line_start":15,"line_end":15,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572775,"byte_end":572785,"line_start":25,"line_end":25,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":575345,"byte_end":575351,"line_start":59,"line_end":59,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":586882,"byte_end":586888,"line_start":362,"line_end":362,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1167},{"krate":0,"index":1171},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":631081,"byte_end":631087,"line_start":1456,"line_end":1456,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":634456,"byte_end":634462,"line_start":1562,"line_end":1562,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/validator.rs","byte_start":636009,"byte_end":636018,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1272},{"krate":0,"index":1281},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1313},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660137,"byte_end":660138,"line_start":13,"line_end":13,"column_start":17,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660335,"byte_end":660344,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660424,"byte_end":660433,"line_start":30,"line_end":30,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/graph.rs","byte_start":660830,"byte_end":660835,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/graph.rs","byte_start":660970,"byte_end":660980,"line_start":14,"line_end":14,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/osstringext.rs","byte_start":665185,"byte_end":665190,"line_start":32,"line_end":32,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/osstringext.rs","byte_start":666833,"byte_end":666840,"line_start":98,"line_end":98,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138061,"byte_end":138069,"line_start":56,"line_end":56,"column_start":16,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1699},"to":{"krate":2,"index":1556}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138183,"byte_end":138191,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1699},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":138278,"byte_end":138286,"line_start":65,"line_end":65,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1699},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/settings.rs","byte_start":169711,"byte_end":169722,"line_start":905,"line_end":905,"column_start":18,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1713},"to":{"krate":2,"index":6022}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":65942,"byte_end":65945,"line_start":118,"line_end":118,"column_start":10,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":113537,"byte_end":113540,"line_start":1373,"line_end":1373,"column_start":10,"column_end":13},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":126506,"byte_end":126509,"line_start":1746,"line_end":1746,"column_start":10,"column_end":13},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/app/mod.rs","byte_start":135889,"byte_end":135892,"line_start":2014,"line_end":2014,"column_start":27,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1819},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":339885,"byte_end":339893,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":340982,"byte_end":340990,"line_start":64,"line_end":64,"column_start":18,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2066},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/settings.rs","byte_start":343413,"byte_end":343424,"line_start":123,"line_end":123,"column_start":18,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":6022}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":180781,"byte_end":180784,"line_start":121,"line_end":121,"column_start":13,"column_end":16},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":329787,"byte_end":329790,"line_start":4092,"line_end":4092,"column_start":42,"column_end":45},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":329889,"byte_end":329892,"line_start":4096,"line_end":4096,"column_start":34,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":330005,"byte_end":330008,"line_start":4100,"line_end":4100,"column_start":27,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":330118,"byte_end":330121,"line_start":4104,"line_end":4104,"column_start":25,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333323,"byte_end":333326,"line_start":4202,"line_end":4202,"column_start":28,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":1970}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333445,"byte_end":333448,"line_start":4206,"line_end":4206,"column_start":21,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333554,"byte_end":333557,"line_start":4210,"line_end":4210,"column_start":20,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg/mod.rs","byte_start":333596,"byte_end":333599,"line_start":4212,"line_end":4212,"column_start":28,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2125},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":351629,"byte_end":351637,"line_start":101,"line_end":101,"column_start":10,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":364262,"byte_end":364270,"line_start":439,"line_end":439,"column_start":20,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2167},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":364695,"byte_end":364703,"line_start":455,"line_end":455,"column_start":41,"column_end":49},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2167},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/arg_group.rs","byte_start":370149,"byte_end":370157,"line_start":637,"line_end":637,"column_start":20,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2167},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/build/usage_parser.rs","byte_start":370911,"byte_end":370922,"line_start":27,"line_end":27,"column_start":10,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":420912,"byte_end":420919,"line_start":26,"line_end":26,"column_start":6,"column_end":13},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421101,"byte_end":421108,"line_start":35,"line_end":35,"column_start":26,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2236},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421297,"byte_end":421304,"line_start":44,"line_end":44,"column_start":26,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2236},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/mkeymap.rs","byte_start":421462,"byte_end":421469,"line_start":53,"line_end":53,"column_start":10,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":431558,"byte_end":431562,"line_start":49,"line_end":49,"column_start":22,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":433279,"byte_end":433283,"line_start":103,"line_end":103,"column_start":22,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":448989,"byte_end":448993,"line_start":518,"line_end":518,"column_start":22,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":453113,"byte_end":453117,"line_start":632,"line_end":632,"column_start":22,"column_end":26},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/help.rs","byte_start":464622,"byte_end":464626,"line_start":958,"line_end":958,"column_start":22,"column_end":26},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/usage.rs","byte_start":471449,"byte_end":471454,"line_start":20,"line_end":20,"column_start":18,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":488019,"byte_end":488028,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489102,"byte_end":489111,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":804},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":489800,"byte_end":489806,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/output/fmt.rs","byte_start":490615,"byte_end":490621,"line_start":156,"line_end":156,"column_start":38,"column_end":44},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2311},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":506339,"byte_end":506344,"line_start":387,"line_end":387,"column_start":6,"column_end":11},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":525945,"byte_end":525950,"line_start":1033,"line_end":1033,"column_start":19,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2376},"to":{"krate":1,"index":1542}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526026,"byte_end":526031,"line_start":1037,"line_end":1037,"column_start":18,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526163,"byte_end":526168,"line_start":1041,"line_end":1041,"column_start":26,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/errors.rs","byte_start":526298,"byte_end":526303,"line_start":1045,"line_end":1045,"column_start":31,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530791,"byte_end":530801,"line_start":20,"line_end":20,"column_start":18,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530885,"byte_end":530895,"line_start":24,"line_end":24,"column_start":16,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2389},"to":{"krate":2,"index":1601}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/arg_matcher.rs","byte_start":530997,"byte_end":531007,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538676,"byte_end":538686,"line_start":72,"line_end":72,"column_start":22,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2394},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":538826,"byte_end":538836,"line_start":81,"line_end":81,"column_start":6,"column_end":16},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567180,"byte_end":567186,"line_start":773,"line_end":773,"column_start":23,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567394,"byte_end":567400,"line_start":780,"line_end":780,"column_start":34,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567514,"byte_end":567520,"line_start":784,"line_end":784,"column_start":32,"column_end":38},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":567581,"byte_end":567587,"line_start":787,"line_end":787,"column_start":22,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2401},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":568962,"byte_end":568970,"line_start":825,"line_end":825,"column_start":23,"column_end":31},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569182,"byte_end":569190,"line_start":832,"line_end":832,"column_start":34,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569306,"byte_end":569314,"line_start":836,"line_end":836,"column_start":32,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":569375,"byte_end":569383,"line_start":839,"line_end":839,"column_start":22,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570560,"byte_end":570567,"line_start":878,"line_end":878,"column_start":23,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2413},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570771,"byte_end":570778,"line_start":885,"line_end":885,"column_start":34,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2413},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570890,"byte_end":570897,"line_start":889,"line_end":889,"column_start":32,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2413},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/arg_matches.rs","byte_start":570958,"byte_end":570965,"line_start":892,"line_end":892,"column_start":22,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2413},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572604,"byte_end":572614,"line_start":15,"line_end":15,"column_start":18,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2419},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/matches/matched_arg.rs","byte_start":572775,"byte_end":572785,"line_start":25,"line_end":25,"column_start":6,"column_end":16},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":575345,"byte_end":575351,"line_start":59,"line_end":59,"column_start":14,"column_end":20},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":586882,"byte_end":586888,"line_start":362,"line_end":362,"column_start":14,"column_end":20},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":631081,"byte_end":631087,"line_start":1456,"line_end":1456,"column_start":14,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/parser.rs","byte_start":634456,"byte_end":634462,"line_start":1562,"line_end":1562,"column_start":14,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/parse/validator.rs","byte_start":636009,"byte_end":636018,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660085,"byte_end":660089,"line_start":9,"line_end":9,"column_start":16,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":6481},"to":{"krate":0,"index":1339}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660137,"byte_end":660138,"line_start":13,"line_end":13,"column_start":17,"column_end":18},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1342},"to":{"krate":0,"index":1339}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660335,"byte_end":660344,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/fnv.rs","byte_start":660424,"byte_end":660433,"line_start":30,"line_end":30,"column_start":17,"column_end":26},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1344},"to":{"krate":2,"index":6486}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/graph.rs","byte_start":660830,"byte_end":660835,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/graph.rs","byte_start":660970,"byte_end":660980,"line_start":14,"line_end":14,"column_start":9,"column_end":19},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/osstringext.rs","byte_start":665185,"byte_end":665190,"line_start":32,"line_end":32,"column_start":20,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":1838},"to":{"krate":0,"index":1375}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/util/osstringext.rs","byte_start":666833,"byte_end":666840,"line_start":98,"line_end":98,"column_start":23,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2543},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21915,"byte_end":21919,"line_start":556,"line_end":556,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":2096},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21934,"byte_end":21941,"line_start":556,"line_end":556,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":1416},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":21944,"byte_end":21949,"line_start":556,"line_end":556,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22005,"byte_end":22010,"line_start":559,"line_end":559,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1413}},{"span":{"file_name":"/home/alberto/.cargo/git/checkouts/clap-78dbe9b58f9073fe/fc359e3/src/lib.rs","byte_start":22384,"byte_end":22389,"line_start":572,"line_end":572,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1416}}]}