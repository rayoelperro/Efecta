{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0","program":"/home/alberto/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=ddf05782fc86447e","-C","extra-filename=-ddf05782fc86447e","--out-dir","/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps","-L","dependency=/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/alberto/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/alberto/Documentos/Proyects/Rust/Efecta/target/rls/debug/deps/libindexmap-ddf05782fc86447e.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[16963618753896010968,16002587315657329219]},"crate_root":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src","external_crates":[{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3103785602532093942,17390144583497853382]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4393201617425879462,3310437476178738552]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7079830315103279809,4606718705203350064]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5206394019873543407,10667910451093706265]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[11652895559356135055,9563436424588767888]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16517787911197841201,14116661015581648310]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[5448928475534237502,8623809376237663283]}},{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9897490559936190142,12325087316115451923]}}],"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":0,"byte_end":4356,"line_start":1,"line_end":143,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":53525,"byte_end":53536,"line_start":9,"line_end":9,"column_start":23,"column_end":34},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":444}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":2907,"byte_end":2917,"line_start":90,"line_end":90,"column_start":21,"column_end":31},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1096},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":2932,"byte_end":2940,"line_start":91,"line_end":91,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1055},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":2955,"byte_end":2963,"line_start":92,"line_end":92,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":0,"byte_end":4356,"line_start":1,"line_end":143,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":17},{"krate":0,"index":28},{"krate":0,"index":37},{"krate":0,"index":63},{"krate":0,"index":444},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1167},{"krate":0,"index":1172},{"krate":0,"index":1170},{"krate":0,"index":1031},{"krate":0,"index":1033},{"krate":0,"index":1035},{"krate":0,"index":1173},{"krate":0,"index":1187},{"krate":0,"index":1183},{"krate":0,"index":1179},{"krate":0,"index":1037},{"krate":0,"index":1048}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/equivalent.rs","byte_start":8470,"byte_end":8480,"line_start":14,"line_end":14,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/equivalent.rs","byte_start":8568,"byte_end":8578,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"fn (&self, key: &K) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":8893,"byte_end":8906,"line_start":7,"line_end":7,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":9455,"byte_end":9466,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":9478,"byte_end":9481,"line_start":22,"line_end":22,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":9492,"byte_end":9497,"line_start":23,"line_end":23,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":9573,"byte_end":9586,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, &mut Self::Key, &mut Self::Value)>","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":10003,"byte_end":10010,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"fn <F> (&mut self, keep: F) -> ()","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":10298,"byte_end":10314,"line_start":43,"line_end":43,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"fn (&self) -> PrivateMarker","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":1055},{"krate":0,"index":1059},{"krate":0,"index":87},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":113},{"krate":0,"index":177},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":243},{"krate":0,"index":249},{"krate":0,"index":255},{"krate":0,"index":261},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":291},{"krate":0,"index":297},{"krate":0,"index":304},{"krate":0,"index":309},{"krate":0,"index":314},{"krate":0,"index":319},{"krate":0,"index":325},{"krate":0,"index":332},{"krate":0,"index":337},{"krate":0,"index":342},{"krate":0,"index":347},{"krate":0,"index":353},{"krate":0,"index":364},{"krate":0,"index":370},{"krate":0,"index":376},{"krate":0,"index":382},{"krate":0,"index":387},{"krate":0,"index":397},{"krate":0,"index":402},{"krate":0,"index":407},{"krate":0,"index":412},{"krate":0,"index":420},{"krate":0,"index":428},{"krate":0,"index":436}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1055},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13115,"byte_end":13123,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1058}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"cfg(has_std)","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13088,"byte_end":13103,"line_start":67,"line_end":67,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14281,"byte_end":14284,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14501,"byte_end":14514,"line_start":124,"line_end":124,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14780,"byte_end":14804,"line_start":134,"line_end":134,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"fn (n: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15064,"byte_end":15067,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15224,"byte_end":15232,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15341,"byte_end":15352,"line_start":155,"line_end":155,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15548,"byte_end":15554,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15682,"byte_end":15690,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15949,"byte_end":15954,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":16052,"byte_end":16059,"line_start":186,"line_end":186,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" FIXME Not implemented fully yet\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":16493,"byte_end":16499,"line_start":198,"line_end":198,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":17037,"byte_end":17048,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"fn (&mut self, value: T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":17447,"byte_end":17451,"line_start":225,"line_end":225,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":17715,"byte_end":17725,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Difference<'a, T, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":18169,"byte_end":18189,"line_start":248,"line_end":248,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> SymmetricDifference<'a, T, S, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":18609,"byte_end":18621,"line_start":260,"line_end":260,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Intersection<'a, T, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":19058,"byte_end":19063,"line_start":273,"line_end":273,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":19392,"byte_end":19400,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":19689,"byte_end":19692,"line_start":294,"line_end":294,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":19889,"byte_end":19897,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"fn <Q> (&self, value: &Q) -> Option<(usize, &T)>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":20264,"byte_end":20271,"line_start":311,"line_end":311,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":20808,"byte_end":20814,"line_start":327,"line_end":327,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":21355,"byte_end":21366,"line_start":342,"line_end":342,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":21916,"byte_end":21928,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":22410,"byte_end":22414,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":22979,"byte_end":22988,"line_start":387,"line_end":387,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":23579,"byte_end":23589,"line_start":403,"line_end":403,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":24105,"byte_end":24121,"line_start":416,"line_end":416,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"fn <Q> (&mut self, value: &Q) -> Option<(usize, T)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":24645,"byte_end":24662,"line_start":429,"line_end":429,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"fn <Q> (&mut self, value: &Q) -> Option<(usize, T)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":24931,"byte_end":24934,"line_start":438,"line_end":438,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":25279,"byte_end":25285,"line_start":449,"line_end":449,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"fn <F> (&mut self, mut keep: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":25526,"byte_end":25530,"line_start":458,"line_end":458,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":25787,"byte_end":25794,"line_start":467,"line_end":467,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"fn <F> (&mut self, mut compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":26093,"byte_end":26102,"line_start":477,"line_end":477,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"fn <F> (self, mut cmp: F) -> IntoIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":26430,"byte_end":26435,"line_start":487,"line_end":487,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"fn (&mut self, range: RangeFull) -> Drain<T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet`, returning all values as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":26731,"byte_end":26740,"line_start":500,"line_end":500,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"fn (&self, index: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":27217,"byte_end":27234,"line_start":513,"line_end":513,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":27716,"byte_end":27734,"line_start":526,"line_end":526,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28164,"byte_end":28172,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":188}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29062,"byte_end":29066,"line_start":576,"line_end":576,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":204}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30059,"byte_end":30064,"line_start":617,"line_end":617,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":228}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32380,"byte_end":32391,"line_start":718,"line_end":718,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32761,"byte_end":32770,"line_start":729,"line_end":729,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":33033,"byte_end":33044,"line_start":736,"line_end":736,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":291},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":33466,"byte_end":33476,"line_start":751,"line_end":751,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":319},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35029,"byte_end":35041,"line_start":813,"line_end":813,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":347},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":36635,"byte_end":36654,"line_start":875,"line_end":875,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":352}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38203,"byte_end":38208,"line_start":935,"line_end":935,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":386}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":444},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":468},{"krate":0,"index":1085},{"krate":0,"index":1090},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":511},{"krate":0,"index":1096},{"krate":0,"index":1102},{"krate":0,"index":1107},{"krate":0,"index":1113},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":538},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":551},{"krate":0,"index":563},{"krate":0,"index":568},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":587},{"krate":0,"index":599},{"krate":0,"index":604},{"krate":0,"index":612},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":642},{"krate":0,"index":652},{"krate":0,"index":657},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":733},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":789},{"krate":0,"index":794},{"krate":0,"index":799},{"krate":0,"index":804},{"krate":0,"index":809},{"krate":0,"index":814},{"krate":0,"index":819},{"krate":0,"index":824},{"krate":0,"index":829},{"krate":0,"index":834},{"krate":0,"index":839},{"krate":0,"index":844},{"krate":0,"index":849},{"krate":0,"index":854},{"krate":0,"index":859},{"krate":0,"index":864},{"krate":0,"index":869},{"krate":0,"index":874},{"krate":0,"index":879},{"krate":0,"index":884},{"krate":0,"index":889},{"krate":0,"index":894},{"krate":0,"index":899},{"krate":0,"index":904},{"krate":0,"index":909},{"krate":0,"index":914},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":927},{"krate":0,"index":931},{"krate":0,"index":935},{"krate":0,"index":940},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":957},{"krate":0,"index":965},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":983},{"krate":0,"index":990},{"krate":0,"index":996},{"krate":0,"index":1002},{"krate":0,"index":1010},{"krate":0,"index":1015},{"krate":0,"index":1024}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1096},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":60973,"byte_end":60981,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"cfg(has_std)","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":60946,"byte_end":60961,"line_start":274,"line_end":274,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64255,"byte_end":64258,"line_start":399,"line_end":399,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64471,"byte_end":64484,"line_start":407,"line_end":407,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64768,"byte_end":64792,"line_start":418,"line_end":418,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"fn (n: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":65690,"byte_end":65693,"line_start":447,"line_end":447,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":65839,"byte_end":65847,"line_start":452,"line_end":452,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":65940,"byte_end":65951,"line_start":455,"line_end":455,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":66141,"byte_end":66147,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":66276,"byte_end":66284,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":581},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":68848,"byte_end":68856,"line_start":560,"line_end":560,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":577},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":584},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":68939,"byte_end":68945,"line_start":562,"line_end":562,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":577},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":577},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":68775,"byte_end":68780,"line_start":558,"line_end":558,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":584}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":69072,"byte_end":69081,"line_start":567,"line_end":567,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":69334,"byte_end":69348,"line_start":575,"line_end":575,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, call: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":69581,"byte_end":69584,"line_start":584,"line_end":584,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":69836,"byte_end":69841,"line_start":592,"line_end":592,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":70068,"byte_end":70078,"line_start":600,"line_end":600,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":70586,"byte_end":70596,"line_start":616,"line_end":616,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":604},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71448,"byte_end":71461,"line_start":647,"line_end":647,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71622,"byte_end":71625,"line_start":655,"line_end":655,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71664,"byte_end":71667,"line_start":656,"line_end":656,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71744,"byte_end":71751,"line_start":659,"line_end":659,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":72091,"byte_end":72096,"line_start":670,"line_end":670,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":72151,"byte_end":72159,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":72330,"byte_end":72336,"line_start":678,"line_end":678,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":72579,"byte_end":72585,"line_start":685,"line_end":685,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":73000,"byte_end":73011,"line_start":696,"line_end":696,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":73429,"byte_end":73441,"line_start":707,"line_end":707,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":73660,"byte_end":73672,"line_start":714,"line_end":714,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":74086,"byte_end":74103,"line_start":725,"line_end":725,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":74538,"byte_end":74556,"line_start":736,"line_end":736,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75084,"byte_end":75095,"line_start":754,"line_end":754,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75257,"byte_end":75260,"line_start":762,"line_end":762,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75299,"byte_end":75307,"line_start":763,"line_end":763,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75411,"byte_end":75416,"line_start":765,"line_end":765,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75463,"byte_end":75469,"line_start":766,"line_end":766,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76767,"byte_end":76772,"line_start":808,"line_end":808,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76944,"byte_end":76951,"line_start":815,"line_end":815,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":78519,"byte_end":78525,"line_start":857,"line_end":857,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":80077,"byte_end":80088,"line_start":893,"line_end":893,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"fn (&mut self, key: K, value: V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":80638,"byte_end":80643,"line_start":910,"line_end":910,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":80858,"byte_end":80862,"line_start":917,"line_end":917,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":81051,"byte_end":81059,"line_start":924,"line_end":924,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":81251,"byte_end":81255,"line_start":931,"line_end":931,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"fn (&self) -> Keys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":81435,"byte_end":81441,"line_start":938,"line_end":938,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"fn (&self) -> Values<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":81659,"byte_end":81669,"line_start":946,"line_end":946,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":81917,"byte_end":81929,"line_start":955,"line_end":955,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":82211,"byte_end":82214,"line_start":965,"line_end":965,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":82398,"byte_end":82406,"line_start":972,"line_end":972,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"fn <Q> (&self, key: &Q) -> Option<(usize, &K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":82722,"byte_end":82729,"line_start":983,"line_end":983,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":82884,"byte_end":82896,"line_start":989,"line_end":989,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, &K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":84150,"byte_end":84156,"line_start":1027,"line_end":1027,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":84697,"byte_end":84708,"line_start":1043,"line_end":1043,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":85279,"byte_end":85295,"line_start":1059,"line_end":1059,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":86027,"byte_end":86039,"line_start":1080,"line_end":1080,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":86606,"byte_end":86623,"line_start":1096,"line_end":1096,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":87050,"byte_end":87053,"line_start":1110,"line_end":1110,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":87401,"byte_end":87407,"line_start":1121,"line_end":1121,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut keep: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":88033,"byte_end":88042,"line_start":1143,"line_end":1143,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":88547,"byte_end":88554,"line_start":1157,"line_end":1157,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":88851,"byte_end":88860,"line_start":1167,"line_end":1167,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"fn <F> (mut self, mut cmp: F) -> IntoIter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":89220,"byte_end":89225,"line_start":1176,"line_end":1176,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"fn (&mut self, range: RangeFull) -> Drain<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap`, returning all key-value pairs as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":89685,"byte_end":89694,"line_start":1197,"line_end":1197,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"fn (&self, index: usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":89952,"byte_end":89965,"line_start":1206,"line_end":1206,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"fn (&mut self, index: usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":90466,"byte_end":90483,"line_start":1219,"line_end":1219,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"fn (&mut self, index: usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":91165,"byte_end":91183,"line_start":1238,"line_end":1238,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"fn (&mut self, index: usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109546,"byte_end":109550,"line_start":1720,"line_end":1720,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":788}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":814},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110674,"byte_end":110680,"line_start":1764,"line_end":1764,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":818}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111835,"byte_end":111844,"line_start":1808,"line_end":1808,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":848}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":864},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112589,"byte_end":112593,"line_start":1837,"line_end":1837,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":868}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":894},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113740,"byte_end":113747,"line_start":1881,"line_end":1881,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":898}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":914},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114552,"byte_end":114560,"line_start":1910,"line_end":1910,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":917}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":935},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115531,"byte_end":115536,"line_start":1946,"line_end":1946,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":939}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1049},"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":4116,"byte_end":4121,"line_start":137,"line_end":137,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/equivalent.rs","byte_start":8652,"byte_end":8653,"line_start":19,"line_end":19,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":10482,"byte_end":10490,"line_start":49,"line_end":49,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13298,"byte_end":13306,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13770,"byte_end":13778,"line_start":99,"line_end":99,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14209,"byte_end":14217,"line_start":114,"line_end":114,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14608,"byte_end":14616,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15757,"byte_end":15765,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":26571,"byte_end":26579,"line_start":494,"line_end":494,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28238,"byte_end":28246,"line_start":543,"line_end":543,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28343,"byte_end":28351,"line_start":549,"line_end":549,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28495,"byte_end":28503,"line_start":555,"line_end":555,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28606,"byte_end":28614,"line_start":561,"line_end":561,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29146,"byte_end":29150,"line_start":580,"line_end":580,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29263,"byte_end":29267,"line_start":586,"line_end":586,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29423,"byte_end":29427,"line_start":592,"line_end":592,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29521,"byte_end":29525,"line_start":598,"line_end":598,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29654,"byte_end":29658,"line_start":604,"line_end":604,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30143,"byte_end":30148,"line_start":621,"line_end":621,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30253,"byte_end":30258,"line_start":627,"line_end":627,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30580,"byte_end":30588,"line_start":643,"line_end":643,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30857,"byte_end":30865,"line_start":657,"line_end":657,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31143,"byte_end":31151,"line_start":667,"line_end":667,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31406,"byte_end":31414,"line_start":677,"line_end":677,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31700,"byte_end":31708,"line_start":688,"line_end":688,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31917,"byte_end":31925,"line_start":697,"line_end":697,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32150,"byte_end":32158,"line_start":707,"line_end":707,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32230,"byte_end":32238,"line_start":713,"line_end":713,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":286},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":33582,"byte_end":33592,"line_start":756,"line_end":756,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34035,"byte_end":34045,"line_start":776,"line_end":776,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34364,"byte_end":34374,"line_start":790,"line_end":790,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34512,"byte_end":34522,"line_start":796,"line_end":796,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35147,"byte_end":35159,"line_start":818,"line_end":818,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35601,"byte_end":35613,"line_start":838,"line_end":838,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35931,"byte_end":35943,"line_start":852,"line_end":852,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":36083,"byte_end":36095,"line_start":858,"line_end":858,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":36783,"byte_end":36802,"line_start":879,"line_end":879,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37268,"byte_end":37287,"line_start":901,"line_end":901,"column_start":45,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37504,"byte_end":37523,"line_start":911,"line_end":911,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37671,"byte_end":37690,"line_start":917,"line_end":917,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38312,"byte_end":38317,"line_start":939,"line_end":939,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38745,"byte_end":38750,"line_start":960,"line_end":960,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38929,"byte_end":38934,"line_start":969,"line_end":969,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":39058,"byte_end":39063,"line_start":975,"line_end":975,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54304,"byte_end":54313,"line_start":47,"line_end":47,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54630,"byte_end":54639,"line_start":58,"line_end":58,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54667,"byte_end":54676,"line_start":59,"line_end":59,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54761,"byte_end":54770,"line_start":64,"line_end":64,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54998,"byte_end":55007,"line_start":73,"line_end":73,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":55266,"byte_end":55275,"line_start":83,"line_end":83,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56173,"byte_end":56176,"line_start":108,"line_end":108,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56262,"byte_end":56265,"line_start":113,"line_end":113,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56489,"byte_end":56492,"line_start":122,"line_end":122,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":59042,"byte_end":59056,"line_start":214,"line_end":214,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":61646,"byte_end":61654,"line_start":301,"line_end":301,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":62585,"byte_end":62593,"line_start":340,"line_end":340,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64180,"byte_end":64188,"line_start":397,"line_end":397,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64586,"byte_end":64594,"line_start":412,"line_end":412,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":66557,"byte_end":66569,"line_start":484,"line_end":484,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":68988,"byte_end":68993,"line_start":565,"line_end":565,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":70871,"byte_end":70876,"line_start":626,"line_end":626,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71585,"byte_end":71598,"line_start":654,"line_end":654,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":74708,"byte_end":74721,"line_start":741,"line_end":741,"column_start":65,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75222,"byte_end":75233,"line_start":761,"line_end":761,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76098,"byte_end":76109,"line_start":785,"line_end":785,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76304,"byte_end":76312,"line_start":793,"line_end":793,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":89513,"byte_end":89521,"line_start":1191,"line_end":1191,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":91769,"byte_end":91781,"line_start":1255,"line_end":1255,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109652,"byte_end":109656,"line_start":1724,"line_end":1724,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109775,"byte_end":109779,"line_start":1730,"line_end":1730,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109936,"byte_end":109940,"line_start":1736,"line_end":1736,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110095,"byte_end":110099,"line_start":1743,"line_end":1743,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110244,"byte_end":110248,"line_start":1749,"line_end":1749,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110771,"byte_end":110777,"line_start":1768,"line_end":1768,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110898,"byte_end":110904,"line_start":1774,"line_end":1774,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111068,"byte_end":111074,"line_start":1780,"line_end":1780,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111229,"byte_end":111235,"line_start":1787,"line_end":1787,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111384,"byte_end":111390,"line_start":1793,"line_end":1793,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111938,"byte_end":111947,"line_start":1812,"line_end":1812,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112072,"byte_end":112081,"line_start":1818,"line_end":1818,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112245,"byte_end":112254,"line_start":1824,"line_end":1824,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112684,"byte_end":112688,"line_start":1841,"line_end":1841,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112813,"byte_end":112817,"line_start":1847,"line_end":1847,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112976,"byte_end":112980,"line_start":1853,"line_end":1853,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113135,"byte_end":113139,"line_start":1860,"line_end":1860,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113296,"byte_end":113300,"line_start":1866,"line_end":1866,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113841,"byte_end":113848,"line_start":1885,"line_end":1885,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113980,"byte_end":113987,"line_start":1891,"line_end":1891,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114149,"byte_end":114156,"line_start":1897,"line_end":1897,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114644,"byte_end":114652,"line_start":1914,"line_end":1914,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114770,"byte_end":114778,"line_start":1920,"line_end":1920,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114934,"byte_end":114942,"line_start":1926,"line_end":1926,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115063,"byte_end":115071,"line_start":1932,"line_end":1932,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115656,"byte_end":115661,"line_start":1950,"line_end":1950,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115783,"byte_end":115788,"line_start":1956,"line_end":1956,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":116404,"byte_end":116412,"line_start":1983,"line_end":1983,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":116744,"byte_end":116752,"line_start":1998,"line_end":1998,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":117335,"byte_end":117343,"line_start":2019,"line_end":2019,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":117729,"byte_end":117737,"line_start":2034,"line_end":2034,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":118325,"byte_end":118333,"line_start":2052,"line_end":2052,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119050,"byte_end":119058,"line_start":2070,"line_end":2070,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119464,"byte_end":119472,"line_start":2083,"line_end":2083,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119706,"byte_end":119714,"line_start":2092,"line_end":2092,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":120083,"byte_end":120091,"line_start":2107,"line_end":2107,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3160,"byte_end":3169,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3249,"byte_end":3258,"line_start":106,"line_end":106,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3334,"byte_end":3343,"line_start":110,"line_end":110,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3545,"byte_end":3551,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":2716,"byte_end":2719,"line_start":82,"line_end":82,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":2729,"byte_end":2732,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":444}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/equivalent.rs","byte_start":8652,"byte_end":8653,"line_start":19,"line_end":19,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":34},"to":{"krate":0,"index":30}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/mutable_keys.rs","byte_start":10482,"byte_end":10490,"line_start":49,"line_end":49,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1096},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13298,"byte_end":13306,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1055},"to":{"krate":0,"index":1048}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":13770,"byte_end":13778,"line_start":99,"line_end":99,"column_start":27,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14209,"byte_end":14217,"line_start":114,"line_end":114,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":14608,"byte_end":14616,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":15757,"byte_end":15765,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":26571,"byte_end":26579,"line_start":494,"line_end":494,"column_start":12,"column_end":20},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28238,"byte_end":28246,"line_start":543,"line_end":543,"column_start":22,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28343,"byte_end":28351,"line_start":549,"line_end":549,"column_start":33,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28495,"byte_end":28503,"line_start":555,"line_end":555,"column_start":31,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":28606,"byte_end":28614,"line_start":561,"line_end":561,"column_start":36,"column_end":44},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":186},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29146,"byte_end":29150,"line_start":580,"line_end":580,"column_start":26,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29263,"byte_end":29267,"line_start":586,"line_end":586,"column_start":37,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29423,"byte_end":29427,"line_start":592,"line_end":592,"column_start":35,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29521,"byte_end":29525,"line_start":598,"line_end":598,"column_start":23,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":29654,"byte_end":29658,"line_start":604,"line_end":604,"column_start":40,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30143,"byte_end":30148,"line_start":621,"line_end":621,"column_start":26,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":225},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30253,"byte_end":30258,"line_start":627,"line_end":627,"column_start":37,"column_end":42},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":225},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30580,"byte_end":30588,"line_start":643,"line_end":643,"column_start":29,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":30857,"byte_end":30865,"line_start":657,"line_end":657,"column_start":32,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3388}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31143,"byte_end":31151,"line_start":667,"line_end":667,"column_start":26,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31406,"byte_end":31414,"line_start":677,"line_end":677,"column_start":34,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31700,"byte_end":31708,"line_start":688,"line_end":688,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":31917,"byte_end":31925,"line_start":697,"line_end":697,"column_start":48,"column_end":56},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32150,"byte_end":32158,"line_start":707,"line_end":707,"column_start":19,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":32230,"byte_end":32238,"line_start":713,"line_end":713,"column_start":12,"column_end":20},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":33582,"byte_end":33592,"line_start":756,"line_end":756,"column_start":29,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34035,"byte_end":34045,"line_start":776,"line_end":776,"column_start":40,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34364,"byte_end":34374,"line_start":790,"line_end":790,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":34512,"byte_end":34522,"line_start":796,"line_end":796,"column_start":31,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35147,"byte_end":35159,"line_start":818,"line_end":818,"column_start":29,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35601,"byte_end":35613,"line_start":838,"line_end":838,"column_start":40,"column_end":52},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":35931,"byte_end":35943,"line_start":852,"line_end":852,"column_start":26,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":36083,"byte_end":36095,"line_start":858,"line_end":858,"column_start":31,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":319},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":36783,"byte_end":36802,"line_start":879,"line_end":879,"column_start":34,"column_end":53},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":347},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37268,"byte_end":37287,"line_start":901,"line_end":901,"column_start":45,"column_end":64},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":347},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37504,"byte_end":37523,"line_start":911,"line_end":911,"column_start":31,"column_end":50},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":347},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":37671,"byte_end":37690,"line_start":917,"line_end":917,"column_start":36,"column_end":55},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":347},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38312,"byte_end":38317,"line_start":939,"line_end":939,"column_start":29,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38745,"byte_end":38750,"line_start":960,"line_end":960,"column_start":40,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":38929,"byte_end":38934,"line_start":969,"line_end":969,"column_start":26,"column_end":31},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/set.rs","byte_start":39058,"byte_end":39063,"line_start":975,"line_end":975,"column_start":31,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54304,"byte_end":54313,"line_start":47,"line_end":47,"column_start":10,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1085},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54630,"byte_end":54639,"line_start":58,"line_end":58,"column_start":19,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1085},"to":{"krate":2,"index":1445}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54667,"byte_end":54676,"line_start":59,"line_end":59,"column_start":20,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1085},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54761,"byte_end":54770,"line_start":64,"line_end":64,"column_start":24,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1085},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":54998,"byte_end":55007,"line_start":73,"line_end":73,"column_start":35,"column_end":44},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1085},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":55266,"byte_end":55275,"line_start":83,"line_end":83,"column_start":34,"column_end":43},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1167},"to":{"krate":2,"index":2096}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56173,"byte_end":56176,"line_start":108,"line_end":108,"column_start":16,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56262,"byte_end":56265,"line_start":113,"line_end":113,"column_start":21,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":56489,"byte_end":56492,"line_start":122,"line_end":122,"column_start":6,"column_end":9},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":59042,"byte_end":59056,"line_start":214,"line_end":214,"column_start":10,"column_end":24},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":61646,"byte_end":61654,"line_start":301,"line_end":301,"column_start":27,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1096},"to":{"krate":0,"index":1048}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":62585,"byte_end":62593,"line_start":340,"line_end":340,"column_start":30,"column_end":38},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64180,"byte_end":64188,"line_start":397,"line_end":397,"column_start":12,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":64586,"byte_end":64594,"line_start":412,"line_end":412,"column_start":15,"column_end":23},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":66557,"byte_end":66569,"line_start":484,"line_end":484,"column_start":12,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":68988,"byte_end":68993,"line_start":565,"line_end":565,"column_start":16,"column_end":21},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":70871,"byte_end":70876,"line_start":626,"line_end":626,"column_start":65,"column_end":70},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":577},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":71585,"byte_end":71598,"line_start":654,"line_end":654,"column_start":16,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":74708,"byte_end":74721,"line_start":741,"line_end":741,"column_start":65,"column_end":78},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":604},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":75222,"byte_end":75233,"line_start":761,"line_end":761,"column_start":16,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76098,"byte_end":76109,"line_start":785,"line_end":785,"column_start":52,"column_end":63},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":634},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":76304,"byte_end":76312,"line_start":793,"line_end":793,"column_start":15,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":89513,"byte_end":89521,"line_start":1191,"line_end":1191,"column_start":15,"column_end":23},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":91769,"byte_end":91781,"line_start":1255,"line_end":1255,"column_start":12,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109652,"byte_end":109656,"line_start":1724,"line_end":1724,"column_start":29,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109775,"byte_end":109779,"line_start":1730,"line_end":1730,"column_start":40,"column_end":44},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":109936,"byte_end":109940,"line_start":1736,"line_end":1736,"column_start":38,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110095,"byte_end":110099,"line_start":1743,"line_end":1743,"column_start":26,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110244,"byte_end":110248,"line_start":1749,"line_end":1749,"column_start":43,"column_end":47},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110771,"byte_end":110777,"line_start":1768,"line_end":1768,"column_start":29,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":814},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":110898,"byte_end":110904,"line_start":1774,"line_end":1774,"column_start":40,"column_end":46},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":814},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111068,"byte_end":111074,"line_start":1780,"line_end":1780,"column_start":38,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":814},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111229,"byte_end":111235,"line_start":1787,"line_end":1787,"column_start":26,"column_end":32},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":814},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111384,"byte_end":111390,"line_start":1793,"line_end":1793,"column_start":43,"column_end":49},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":814},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":111938,"byte_end":111947,"line_start":1812,"line_end":1812,"column_start":29,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":844},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112072,"byte_end":112081,"line_start":1818,"line_end":1818,"column_start":40,"column_end":49},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":844},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112245,"byte_end":112254,"line_start":1824,"line_end":1824,"column_start":38,"column_end":47},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":844},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112684,"byte_end":112688,"line_start":1841,"line_end":1841,"column_start":29,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112813,"byte_end":112817,"line_start":1847,"line_end":1847,"column_start":40,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":112976,"byte_end":112980,"line_start":1853,"line_end":1853,"column_start":38,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113135,"byte_end":113139,"line_start":1860,"line_end":1860,"column_start":26,"column_end":30},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113296,"byte_end":113300,"line_start":1866,"line_end":1866,"column_start":55,"column_end":59},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":864},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113841,"byte_end":113848,"line_start":1885,"line_end":1885,"column_start":29,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":894},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":113980,"byte_end":113987,"line_start":1891,"line_end":1891,"column_start":40,"column_end":47},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":894},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114149,"byte_end":114156,"line_start":1897,"line_end":1897,"column_start":38,"column_end":45},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":894},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114644,"byte_end":114652,"line_start":1914,"line_end":1914,"column_start":25,"column_end":33},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":914},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114770,"byte_end":114778,"line_start":1920,"line_end":1920,"column_start":40,"column_end":48},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":914},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":114934,"byte_end":114942,"line_start":1926,"line_end":1926,"column_start":34,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":914},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115063,"byte_end":115071,"line_start":1932,"line_end":1932,"column_start":51,"column_end":59},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":914},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115656,"byte_end":115661,"line_start":1950,"line_end":1950,"column_start":29,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":935},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":115783,"byte_end":115788,"line_start":1956,"line_end":1956,"column_start":40,"column_end":45},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":935},"to":{"krate":2,"index":3360}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":116404,"byte_end":116412,"line_start":1983,"line_end":1983,"column_start":32,"column_end":40},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":116744,"byte_end":116752,"line_start":1998,"line_end":1998,"column_start":47,"column_end":55},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":117335,"byte_end":117343,"line_start":2019,"line_end":2019,"column_start":50,"column_end":58},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":1681}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":117729,"byte_end":117737,"line_start":2034,"line_end":2034,"column_start":40,"column_end":48},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":3388}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":118325,"byte_end":118333,"line_start":2052,"line_end":2052,"column_start":34,"column_end":42},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119050,"byte_end":119058,"line_start":2070,"line_end":2070,"column_start":46,"column_end":54},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119464,"byte_end":119472,"line_start":2083,"line_end":2083,"column_start":27,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":119706,"byte_end":119714,"line_start":2092,"line_end":2092,"column_start":60,"column_end":68},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/map.rs","byte_start":120083,"byte_end":120091,"line_start":2107,"line_end":2107,"column_start":22,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1096},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3160,"byte_end":3169,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3249,"byte_end":3258,"line_start":106,"line_end":106,"column_start":16,"column_end":25},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1167},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3334,"byte_end":3343,"line_start":110,"line_end":110,"column_start":20,"column_end":29},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1167},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/alberto/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.0/src/lib.rs","byte_start":3545,"byte_end":3551,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1173},"to":{"krate":4294967295,"index":4294967295}}]}